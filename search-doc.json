{"searchDocs":[{"title":"Color mode","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/concepts/color_mode","content":"","keywords":"","version":"Next"},{"title":"RGBA​","type":1,"pageTitle":"Color mode","url":"/Pixelorama-Docs/concepts/color_mode#rgba","content":" RGBA is the default color mode. It stands for Red, Green, Blue and Alpha. When using this color mode, each pixel of the image contains four values: a red value, a green value, a blue value and an alpha value. The first three values make up the color of the pixel, and the alpha value contains its transparency.  ","version":"Next","tagName":"h2"},{"title":"Indexed​","type":1,"pageTitle":"Color mode","url":"/Pixelorama-Docs/concepts/color_mode#indexed","content":" When using the indexed color mode, each pixel contains a number that references the index of a color in the palette. This means that the pixels do not have their own independent color values. Instead, they get their color from the palette, depending on the index number they contain. This essentially means that if a pixel contains the number &quot;3&quot;, its color will be the same as the 3rd color of the currently selected palette. Changing that color in the palette, or even switching to a new palette, will change all of the colors of the image that are also mapped to the 3rd palette color. Re-ordering the colors of the palette also affect the image. If the 3rd color in the palette is a blue color and the 4th is a green one, moving the green one into the 3rd spot, will make all of the previously blue pixels of the image green, as they will remain mapped to the 3rd color of the palette, whatever that is.  To change the color of the pixels, simply pick the color you want from the palette, and use a drawing tool on the pixels you want. If you freely select a color from the color picker, it will not be applied to the image. Instead, Pixelorama will automatically find the closest color from the currently active palette, and apply that instead.  This mode is used when you want to limit the colors of your project to a specific palette, and when you want changes in the palette to be reflected immediately to all pixels of the image. ","version":"Next","tagName":"h2"},{"title":"Brush","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/concepts/brush","content":"","keywords":"","version":"Next"},{"title":"Brush Types​","type":1,"pageTitle":"Brush","url":"/Pixelorama-Docs/concepts/brush#brush-types","content":" Pixelorama comes with three default brushes, the usual pixel/square brush, a hollow circle and a filled circle brush. These brushes are based on algorithms, while all of the other brushes as of right now are based on image data. The main difference is that the image-based brushes are scaled the same way that images are being scaled, which may not always have the result we desire. The image-based brushes are also divided into two types, File brushes and Project brushes. File brushes are stored as external .png files, while project brushes are stored in the project itself. File brushes can also be Random brushes. Each time you draw using a random brush, the result will be something different!  Image-based brushes will also have one extra option in the tool settings; a &quot;Brush Color From&quot; slider which goes from 0 to 100. If it's set to 0, the resulting color(s) of the brush will come entirely from the image data themselves. Otherwise, if set to 100, the brush color will come from the currently selected color. This setting is important to have because, since image-based brushes rely on image data, this means that they also get to keep the original colors of the image data.  ","version":"Next","tagName":"h2"},{"title":"Making Your Own Custom Brushes​","type":1,"pageTitle":"Brush","url":"/Pixelorama-Docs/concepts/brush#making-your-own-custom-brushes","content":" ","version":"Next","tagName":"h2"},{"title":"File Brushes​","type":1,"pageTitle":"Brush","url":"/Pixelorama-Docs/concepts/brush#file-brushes","content":" Pixelorama gives you the option to create your own custom brushes, which you can later use to draw. There are two brush types, File and Project brushes. File brushes are .png files saved in the pixelorama_data/Brushes directory. They are available for all projects. To create a &quot;File&quot; custom brush, all you need to do is create your brush and save it as a .png file in the pixelorama_data/Brushes directory. They will be found on the &quot;File&quot; tab.    ","version":"Next","tagName":"h3"},{"title":"Random Brushes​","type":1,"pageTitle":"Brush","url":"/Pixelorama-Docs/concepts/brush#random-brushes","content":" To make a random brush, save your sprites as multiple .png files, with &quot;~&quot; at the beginning of their filename, and save them in the same sub-directory. For example, if you want to save a grass random brush, you can create a pixelorama_data/Brushes/Grass directory, and name the files something like ~Grass1.png, ~Grass2.png, ~Grass3.png, ~Grass4.png, and so on. The more files you add, the more variation (random values) your random brush will have.    ","version":"Next","tagName":"h3"},{"title":"Project Brushes​","type":1,"pageTitle":"Brush","url":"/Pixelorama-Docs/concepts/brush#project-brushes","content":" Project brushes are project-dependent, which means that they're not available for all projects. They are saved inside .pxo files. To create a Project brush you can select the part of the drawing you want to save as brush, and press Control + B or go to Edit, New Brush. They will be found on the &quot;Project&quot; tab.   ","version":"Next","tagName":"h3"},{"title":"Cel","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/concepts/cel","content":"","keywords":"","version":"Next"},{"title":"Linked cels​","type":1,"pageTitle":"Cel","url":"/Pixelorama-Docs/concepts/cel#linked-cels","content":" You can also right-click cels, that belong to a pixel layer, to link them together. Linked cels share the same image data, meaning that if you make changes to one linked cel, the changes are shared with all other linked cels. Keep in mind that, as of right now, linked cels are layer-local. You cannot have cels linked that belong to different layers, only different frames. Linked cels are marked with a colored rectangle behind their preview.  ","version":"Next","tagName":"h2"},{"title":"Z-Index​","type":1,"pageTitle":"Cel","url":"/Pixelorama-Docs/concepts/cel#z-index","content":" Z-index can be edited through the cel properties, and it is used to change the ordering of individual cels independently of the layer they are in, making them appear behind, or in front of other cels in different layers. The default value of 0 means that the cel's ordering is the same as its layer's. Positive values move it to the front, and negative values move it to the back. ","version":"Next","tagName":"h2"},{"title":"Project","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/concepts/project","content":"","keywords":"","version":"Next"},{"title":"Saving a project​","type":1,"pageTitle":"Project","url":"/Pixelorama-Docs/concepts/project#saving-a-project","content":" See this page to learn how to save a project.  ","version":"Next","tagName":"h2"},{"title":".pxo files​","type":1,"pageTitle":"Project","url":"/Pixelorama-Docs/concepts/project#pxo-files","content":" Pxo files are Pixelorama's custom file format that saves the entire content of the project. As it is a format dedicated to Pixelorama, it is not meant to be opened by most other conventional image editors, unless they have manually added support for it.  ","version":"Next","tagName":"h2"},{"title":"File structure​","type":1,"pageTitle":"Project","url":"/Pixelorama-Docs/concepts/project#file-structure","content":" The file format is essentially a .zip file in disguise. It contains a data.json file, and an image_data folder. The data.json file contains all of the project's metadata, such as project name, size, FPS, and the metadata of layers, frames, cels, etc. They are stored in JSON form, so they can easily be read by other software, such as custom tools or game engine plugins.  The image_data folder contains all of the image data. It contains another folder called frames, which in turn contains a folder for each frame of the project, and each frame folder contains the image data of every cel that belongs to that frame. To preserve a non-destructive workflow, the cel image data are not affected by layer blend modes and layer effects. Along with the image data themselves, the data of the indices of each pixel are also being stored in the form of images. The files of these names start with indices_, and they are needed for indexed mode.  If you have enabled the option to include the blended images, the image_data folder will also contain all of the final image data for each frame. A final image is composed of every cel, with the layer effects applied to each cel, blended together into a single image, taking the blend modes of each layer into account.  If the project has brushes, a brushes folder is also created, containing all of the brush image data. Similarly, if the project contains tilemap layers, the tilesets that they use are being stored in a tilesets folder. Each tileset has its own folder, named after its index, and the folders contain the individual tiles in the form of image data. If the project contains audio layers, the audio files of these layers are being stored in an audio folder.  In order for a software to read the data of a pxo, it has to open it as a zip file, and then it has to read the data.json file, and parse it as JSON object. Then, it either has to loop through the all of the folders included in image_data/frames, where each folder contains the cel data for each frame separately, or, if the final blended images are included and that's all we care about, it just has to loop through all of the images inside the image_data folder, where each image corresponds to every frame of the project, and import them.  ","version":"Next","tagName":"h3"},{"title":"Include blended images​","type":1,"pageTitle":"Project","url":"/Pixelorama-Docs/concepts/project#include-blended-images","content":" During save, you are given the option to select if the blended images will be included in the exported file. If enabled, the final blended images are also being stored in the pxo, for each frame. This makes the pxo file larger and is useful for importing by third-party software or CLI exporting. Loading pxo files in Pixelorama does not need this option to be enabled. ","version":"Next","tagName":"h3"},{"title":"Layer","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/concepts/layer","content":"","keywords":"","version":"Next"},{"title":"Types of layers​","type":1,"pageTitle":"Layer","url":"/Pixelorama-Docs/concepts/layer#types-of-layers","content":" Right now, there are three types of layers. Pixel layers, group layers, and 3D layers.  ","version":"Next","tagName":"h2"},{"title":"Pixel layers​","type":1,"pageTitle":"Layer","url":"/Pixelorama-Docs/concepts/layer#pixel-layers","content":" Pixel layers are the default and most straight forward type of layer. Their cels contain regular raster image data, in which you can normally draw and manipulate pixels. Pixel cels are the only types of cels that can be linked right now.  ","version":"Next","tagName":"h3"},{"title":"Group layers​","type":1,"pageTitle":"Layer","url":"/Pixelorama-Docs/concepts/layer#group-layers","content":" Group layers are used mostly for organization and their cels are empty and do not hold any actual data. They can be used to group common layers together, and they can expanded and collapsed from view in the timeline. If their blend mode is set to something other than passthrough, they blend all of their children together, and they can be used as clipping masks, and by clipping masks.  ","version":"Next","tagName":"h3"},{"title":"3D layers​","type":1,"pageTitle":"Layer","url":"/Pixelorama-Docs/concepts/layer#3d-layers","content":" The cels of 3D layers contain 3D mesh, lighting, camera and environment data, that are being rasterized based on the size of the canvas. They can contain lights, such as directional lights, spot lights and point lights, and a variety of primitive meshes, including boxes, capsules, spheres, cylinders, prisms, toruses, planes and even text. Importing custom .obj models is also possible.  ","version":"Next","tagName":"h3"},{"title":"Tilemap layers​","type":1,"pageTitle":"Layer","url":"/Pixelorama-Docs/concepts/layer#tilemap-layers","content":" Tilemap layers are a special type of pixel layer which use a tileset, and each cell of the grid has a reference to a tile from that tileset. See the tilemaps page for more information.  ","version":"Next","tagName":"h3"},{"title":"Audio layers​","type":1,"pageTitle":"Layer","url":"/Pixelorama-Docs/concepts/layer#audio-layers","content":" Audio layers do not contain any visible data. Rather, as their name suggests, they contain audible data. More specifically, each audio layer contains an audio file, which can be played at any time during the animation. Users can load an audio file (only .mp3 and .wav files are supported at the moment), and choose the frame they want the audio to start playing. Making an audio layer invisible essentially mutes the audio. Exporting a project file with audio layers as a video file will include the audio in the exported video.  ","version":"Next","tagName":"h3"},{"title":"Blend modes​","type":1,"pageTitle":"Layer","url":"/Pixelorama-Docs/concepts/layer#blend-modes","content":" The blend mode of each layer determines how its colors blend with the colors of the layer directly below it. Pixelorama supports the following blend modes:  Name\tCategory\tDescriptionPassthrough\tNormal\tOnly for group layers. Ignores group blending, like the group doesn't exist. Normal\tNormal\tThe blend layer colors are simply placed on top of the base colors. Erase\tNormal\tErases the non-transparent areas of the upper layer from the lower layer's alpha. Darken\tDarken\tKeeps the darker colors between the blend and the base layers. Multiply\tDarken\tMultiplies the numerical values of the two colors, giving a darker result. Color burn\tDarken\tDarkens by increasing the contrast between the blend and base colors. Linear burn\tDarken\tDarkens the base colors based on the value of the blend colors. Lighten\tLighten\tKeeps the lighter colors between the blend and the base layers. Screen\tLighten\tLightens the colors by multiplying the inverse of the blend and base colors. Color dodge\tLighten\tLightens by decreasing the contrast between the blend and base colors. Add\tLighten\tLightens by adding the numerical values of the two colors. Also known as linear dodge. Overlay\tContrast\tLike Screen mode in bright base colors and Multiply mode in darker base colors. Soft light\tContrast\tSimilar to Overlay, but more subtle. Hard light\tContrast\tLike Screen mode in bright blending colors and Multiply mode in darker colors. Difference\tInversion\tSubtracts the blend color from the base or vice versa, depending on the brightness. Exclusion\tInversion\tSimilar to Difference mode, but with less contrast between the colors. Subtract\tInversion\tDarkens by subtracting the numerical values of the blend colors from the base. Divide\tInversion\tDivides the numerical values of the base colors by the blend. Hue\tComponent\tUses the blend hue while preserving the base saturation and luminosity. Saturation\tComponent\tUses the blend saturation while preserving the base hue and luminosity. Color\tComponent\tUses the blend hue and saturation while preserving the base luminosity. Luminosity\tComponent\tUses the blend luminosity while preserving the base hue and saturation.  ","version":"Next","tagName":"h2"},{"title":"Layer effects​","type":1,"pageTitle":"Layer","url":"/Pixelorama-Docs/concepts/layer#layer-effects","content":" Layer effects are image effects that are being applied to the layer in a non-destructive way. This means that they do not directly modify the image data, which allows artists to disable and enable them at will, without having to worry that their work will be modified in a permanent way. They are only being applied on export, and they can be previewed in the canvas, if &quot;Display Layer Effects&quot; is enabled, under the View menu. Each layer can contain multiple layer effects.  To add a layer effect, you can click on the &quot;FX&quot; button in the layer area of the timeline. A window will appear, that lets you add, remove and change the order of layer effects. You can also change the properties of each effect. For a list of all available layer effects, see image effects.  Layer vs image effects The difference between layer effects and image effects, is that layer effects can only be applied per-layer and are non-destructive, while image effects can be applied to multiple cels at the same time, and are destructive. Also, as of right now, layer effects cannot be animated.  ","version":"Next","tagName":"h2"},{"title":"Clipping mask​","type":1,"pageTitle":"Layer","url":"/Pixelorama-Docs/concepts/layer#clipping-mask","content":" Clipping masks can be used to draw the content of the layer only on top of the non-transparent pixels of the layer directly below. In other words, the layer below the clipping mask is what controls the visibility of the content of the clipping mask. You can make a layer be a clipping mask by right-clicking the layer button in the timeline, and toggling &quot;Clipping mask&quot;. ","version":"Next","tagName":"h2"},{"title":"Extension Basics","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/extension_system/extension_basics","content":"","keywords":"","version":"Next"},{"title":"Ways to contribute","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/development_and_contributing","content":"","keywords":"","version":"Next"},{"title":"Say something nice!​","type":1,"pageTitle":"Ways to contribute","url":"/Pixelorama-Docs/development_and_contributing#say-something-nice","content":" While material help is great, we don't want anyone to feel forced or obliged to give money to us, especially if they can't afford to. Sometimes saying something nice can go a long way! Showing your love and appreciation to someone could make their day, and give them strength to pursue their dreams and make their visions a reality. If you like Pixelorama and wish to help somehow, consider leaving a positive comment. And not just to the main development team, but to the awesome contributors who helped shape this software in so many ways! It's up to us to make a more wholesome world and every little bit counts. Of course, if you have more feedback and criticism to share, feel free to do so!  ","version":"Next","tagName":"h2"},{"title":"Spread the word!​","type":1,"pageTitle":"Ways to contribute","url":"/Pixelorama-Docs/development_and_contributing#spread-the-word","content":" Talk to your friends, co-workers, people from your communities and anyone who might be interested in Pixelorama! You can promote it on your social media, make videos about it or, even better, draw! Create content using Pixelorama and tell the world that you used it for your creations! Making Pixelorama more popular is a win-win scenario for everyone because more people knowing about it means that we will get more feedback, which will be used to make Pixelorama even better, and some people might be interested even in contributing code directly!  ","version":"Next","tagName":"h2"},{"title":"Donations​","type":1,"pageTitle":"Ways to contribute","url":"/Pixelorama-Docs/development_and_contributing#donations","content":" Pixelorama is a free and open-source project. This means that all of our income so far comes solely from donations. Unfortunately, while our creativity stems from our love of the project, today's world rules force us to make a living using real-life currencies. We need that money to survive and to keep our focus on our projects, such as Pixelorama, without having to worry about how to afford our rent and groceries by working at jobs that do not represent us. If you wish to see this project grow and help us financially, you can become our Patron and receive some nice benefits. You can also buy Pixelorama on itch.io, for an amount of your choice! If you wish to support Overloaded, the main developer directly, you can do that on Ko-Fi or on PayPal.    ","version":"Next","tagName":"h2"},{"title":"Purchase on Steam​","type":1,"pageTitle":"Ways to contribute","url":"/Pixelorama-Docs/development_and_contributing#purchase-on-steam","content":" As you may be aware, Pixelorama is available on Steam! Purchasing it and leaving a review is a great way to support our project. You can refer to our FAQ to find out what's different in the Steam version.    ","version":"Next","tagName":"h2"},{"title":"Contributing Code​","type":1,"pageTitle":"Ways to contribute","url":"/Pixelorama-Docs/development_and_contributing#contributing-code","content":" You are free to open pull requests to Pixelorama's GitHub Repository to fix issues or implement new features. Keep in mind, however, that not all PRs will be merged. Some may need discussion, or others may be downright closed. Make sure to read the CONTRIBUTING.md file first.  ","version":"Next","tagName":"h2"},{"title":"Contributing Feedback​","type":1,"pageTitle":"Ways to contribute","url":"/Pixelorama-Docs/development_and_contributing#contributing-feedback","content":" Do you have a super cool idea for the development of Pixelorama and want to share it? Then the best way to do it is by opening a Discussion on GitHub. That is the most effective way for your feedback to be seen and discussed with the team and other developers that are interested in helping.  ","version":"Next","tagName":"h2"},{"title":"Testing and reporting issues​","type":1,"pageTitle":"Ways to contribute","url":"/Pixelorama-Docs/development_and_contributing#testing-and-reporting-issues","content":" Did Pixelorama crash? Did you find a bug, performance issue, visual glitches or overall unexpected behavior? If so, feel free to open an Issue on GitHub. If you wish to maximize the chances of the issue being addressed, please keep in mind to be as specific as possible and provide as many details as you can. The version of Pixelorama, your operating system, a clear and thorough explanation of the issue and steps to reproduce (if you know them) are a must to include. Otherwise, it will be harder for us to replicate the issue, and thus find the source of the problem. If you want to, including screenshots and videos of you replicating the issue in your issue report is a great help!  ","version":"Next","tagName":"h2"},{"title":"Contributing Documentation​","type":1,"pageTitle":"Ways to contribute","url":"/Pixelorama-Docs/development_and_contributing#contributing-documentation","content":" The documentation is hosted on GitHub. If you wish to contribute, you are free to open pull requests. Make sure to read the CONTRIBUTING.md file first.  ","version":"Next","tagName":"h2"},{"title":"Contributing Translations​","type":1,"pageTitle":"Ways to contribute","url":"/Pixelorama-Docs/development_and_contributing#contributing-translations","content":" If you wish to contribute a translation, make sure to use Pixelorama's Crowdin page. Crowdin is a web-based translation platform, where people can contribute translations together and with ease. Please use Crowdin and do not directly open pull requests to Pixelorama's GitHub repository.  Link: https://crowdin.com/project/pixelorama ","version":"Next","tagName":"h2"},{"title":"Making an Extension​","type":1,"pageTitle":"Extension Basics","url":"/Pixelorama-Docs/extension_system/extension_basics#making-an-extension","content":" Since Pixelorama v0.10, you can add/remove extensions to/from Pixelorama. Extensions are distributed as PCK (.pck) or ZIP (.zip) files and you can manage them from Edit &gt; Preferences &gt; Extensions. This is a step-by-step guide of how you can make an extension for Pixelorama. For this tutorial the extension we'll make will be called &quot;Example&quot;  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Extension Basics","url":"/Pixelorama-Docs/extension_system/extension_basics#prerequisites","content":" First of all, there are a few prerequisites for you to start creating extensions.  Some knowledge of GdScript.A ready to use Godot executable (See the Pixelorama Channgelog to figure out which version to use).Source code for your target version of Pixelorama (This is optional but will speed up your debugging workflow).  ","version":"Next","tagName":"h3"},{"title":"Process​","type":1,"pageTitle":"Extension Basics","url":"/Pixelorama-Docs/extension_system/extension_basics#process","content":" version control To ensure your work isn't accidentally lost, it is highly recommended that you use version control (e.g Git) in your extension project.  First of all make a new Godot project of name &quot;Example&quot; (the project name is irrelevant but for simplicity we'll name it the same as our extension).After that make a directory structure as shown in the image below.    The File Structure of any basic extension.​  In the &quot;Example&quot; folder you can see three files;  extension.jsonMain.tscnMain.gd  These files are the bare minimum required for an extension to function properly. Let's go through each of them one by one:  ","version":"Next","tagName":"h3"},{"title":"extension.json​","type":1,"pageTitle":"Extension Basics","url":"/Pixelorama-Docs/extension_system/extension_basics#extensionjson","content":" The extension.json file serves as a basic configuration file for the extension. A proper extension.json file should contain the below content  { &quot;name&quot;: &quot;Example&quot;, &quot;display_name&quot;: &quot;Anything you want&quot;, &quot;description&quot;: &quot;What the extension does&quot;, &quot;author&quot;: &quot;Your Name&quot;, &quot;version&quot;: &quot;0.1&quot;, &quot;supported_api_versions&quot;: [4], &quot;license&quot;: &quot;MIT&quot;, &quot;nodes&quot;: [ &quot;Main.tscn&quot; ] }   Key\tDescriptionname\tThe extension name (in this case Example). display_name\tThe name actually shown by Pixelorama in it's extension list (it can be anything). author\tAuthor of the extension. version\tversion of the extension, it is a floating value so versions like 20.1.7 etc. are invalid. supported_api_versions\t(Optional) Announces the Api level of the extension. Pixelorama uses this to check compatibility between versions. license\tName of license used by the extension. nodes\tArray containing name of scenes that should be instanced as soon extension gets enabled (in this case it is Main.tscn).  Api Versions supported_api_versions is an optional key that is used by Pixelorama to determine if it is compatible with it's Api ( E.g [ 3 ] means you are making extension for Pixelorama 0.11.x). If your extension is compatible with multiple api e.g (level 2 and 3) then use [ 2, 3 ]. To find the Api level of Pixelorama open the project.godot file in Pixelorama's Source and look for config/ExtensionsAPI_Version  ","version":"Next","tagName":"h3"},{"title":"Main.tscn​","type":1,"pageTitle":"Extension Basics","url":"/Pixelorama-Docs/extension_system/extension_basics#maintscn","content":" As mentioned above, the Main.tscn will be instanced in Pixelorama as soon as the extension gets enabled. a GdScript file (In this case Main.gd) is attached to this scene.  ","version":"Next","tagName":"h3"},{"title":"Main.gd​","type":1,"pageTitle":"Extension Basics","url":"/Pixelorama-Docs/extension_system/extension_basics#maingd","content":" As mentioned above, the Main.gd is a script written in GdScript, that will be run as soon as the extension gets enabled. It can be used to  Instance further scenes (.tscn files).Or contain the core extension code.  The content of a basic Main.gd file is;  extends Node # NOTE: use get_node_or_null(&quot;/root/ExtensionsApi&quot;) to access the extension api. # Runs as soon as extension is enabled. This script can act as a setup for the extension. func _enter_tree() -&gt; void: pass func _exit_tree() -&gt; void: # Extension is being uninstalled or disabled # remember to remove things that you added using this extension pass   ","version":"Next","tagName":"h3"},{"title":"Exporting the Extension​","type":1,"pageTitle":"Extension Basics","url":"/Pixelorama-Docs/extension_system/extension_basics#exporting-the-extension","content":" Export Templates Downloading/Installing export templates is not required for .pck export.  Now that you have the basic extension code ready, let's export it;  From the top bar in Godot editor go to Project &gt; Export and choose any platform option (the extension should work on other platforms regardless of which platform you choose). In then go to the Resources tab and do the following changes; Export Mode should be set to Export all resources in the projectFilters to export non-resource files/folders should be set to *.jsonFilters to exclude files/folders from project can remain empty.  Extension Export Options.​  After that, press Export PCK/Zip and export it as a PCK file (both Zip and PCK extensions are recognized by Pixelorama but PCK is recommended). The name of exported pck should be the same as the name of your extension, in this case it should be Example.pck  ","version":"Next","tagName":"h2"},{"title":"Installing the Extension​","type":1,"pageTitle":"Extension Basics","url":"/Pixelorama-Docs/extension_system/extension_basics#installing-the-extension","content":" To install an extension, from Pixelorama's top menu go to Edit &gt; Preferences &gt; Extensions and click Add Extension.  Drag and Drop A more easier way would be to drag and drop the extension in Pixelorama.    Adding an Extension.​  After it has appeared in the list of extensions, select it press Enable.  ","version":"Next","tagName":"h2"},{"title":"Debugging an Extension​","type":1,"pageTitle":"Extension Basics","url":"/Pixelorama-Docs/extension_system/extension_basics#debugging-an-extension","content":" Faster Workflow During debugging, it is way faster to export the .pck directly to the extensions folder. To get path to that folder, go to Edit &gt; Preferences &gt; Extensions --&gt;Open Folder  In order to debug an extension, you need to have the source-code of your target version of Pixelorama open in another godot instance. To start debugging, run pixelorama through godot and follow the steps mentioned in Installing the Extension. The debug messages for the extension will appear in the Godot instance that's running the Pixelorama's source-code.    Debugging of an extension (stack trace shown as a result of non existent function).​ ","version":"Next","tagName":"h2"},{"title":"FAQ","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/faq","content":"","keywords":"","version":"Next"},{"title":"Q: How much does Pixelorama cost?​","type":1,"pageTitle":"FAQ","url":"/Pixelorama-Docs/faq#q-how-much-does-pixelorama-cost","content":" A: Pixelorama is available for the extremely cheap price of $0.00! That's right! Pixelorama is a free and open-source software (FOSS), available under the (very permissive) MIT license! In short:  You are free to download and use Pixelorama for any purpose, personal, non-profit, commercial, or otherwise.You are free to modify, distribute, redistribute, and remix Pixelorama to your heart’s content, for any reason, both non-commercially and commercially.  However, the Steam version is paid.  ","version":"Next","tagName":"h2"},{"title":"Q: What platforms is Pixelorama available on?​","type":1,"pageTitle":"FAQ","url":"/Pixelorama-Docs/faq#q-what-platforms-is-pixelorama-available-on","content":" A: Pixelorama is currently available for Windows, Linux, Mac and Web browsers. More platforms may be supported in the future. You can download Pixelorama from itch.io, GitHub releases and on Steam. It is also available on Scoop for Windows, as a Flatpak and Snap for Linux.  ","version":"Next","tagName":"h2"},{"title":"Q: What benefits does the Steam version provide?​","type":1,"pageTitle":"FAQ","url":"/Pixelorama-Docs/faq#q-what-benefits-does-the-steam-version-provide","content":" A: Users who buy Pixelorama through Steam will enjoy the benefits that Steam provides to all of the games and software hosted there, such as automatic updates and Steam Achievements. It is also a great way to fund the project's development! Apart from that, there will be no other difference between the non-Steam version. All of Pixelorama's features will be the same in all versions, and all versions will receive the same updates. In other words, the Steam version will not be a &quot;Pro&quot; version. It will be exactly the same as the non-Steam version, just with the added benefits that come naturally from Steam.  ","version":"Next","tagName":"h2"},{"title":"Q: What are the minimum system requirements to run Pixelorama?​","type":1,"pageTitle":"FAQ","url":"/Pixelorama-Docs/faq#q-what-are-the-minimum-system-requirements-to-run-pixelorama","content":" A: Pixelorama is a relatively lightweight software and it should run on most devices, as long as OpenGL 3.3 / OpenGL ES 3.0 is supported.  ","version":"Next","tagName":"h2"},{"title":"Q: Does Pixelorama work on the Steam Deck?​","type":1,"pageTitle":"FAQ","url":"/Pixelorama-Docs/faq#q-does-pixelorama-work-on-the-steam-deck","content":" A: It should! It works on Linux, so it should work on Steam Deck as well. Pixelorama also supports gamepad shortcuts, so you should be able to map the Steam Deck's buttons to actions such as undo/redo, copy, paste, etc. The reason we're not 100% certain is because we don't currently own a Steam Deck to test it ourselves.  ","version":"Next","tagName":"h2"},{"title":"Q: Is Pixelorama safe?​","type":1,"pageTitle":"FAQ","url":"/Pixelorama-Docs/faq#q-is-pixelorama-safe","content":" A: Pixelorama is completely safe, as long as you download it from official sources (see Q: What platforms is Pixelorama available on? above). Its open-source nature allows for perfect transparency, thus it is impossible for us to sneak in malicious code without anyone noticing. The official builds are also being generated directly from the source code using GitHub Actions, so there is no worry that someone is sneaking in malicious code in the process of compiling. You may, however, get some security warnings from security software, such as Windows SmartScreen. The reason for this is that Pixelorama is not signed, and thus not recognized by the security system. You can safely ignore these warnings and proceed to run Pixelorama.  ","version":"Next","tagName":"h2"},{"title":"Q: What languages is Pixelorama available in?​","type":1,"pageTitle":"FAQ","url":"/Pixelorama-Docs/faq#q-what-languages-is-pixelorama-available-in","content":" A: The main language is English, but Pixelorama is also available in numerous other languages! All of our translation files are hosted in Crowdin. By default, the language that Pixelorama is in is the system language of your device. You can easily change it by going to the Edit menu &gt; Preferences &gt; Language.  ","version":"Next","tagName":"h2"},{"title":"Q: Who is working on Pixelorama?​","type":1,"pageTitle":"FAQ","url":"/Pixelorama-Docs/faq#q-who-is-working-on-pixelorama","content":" A: Pixelorama is being developed by Orama Interactive, a game development team. Of course, Pixelorama would not be the same without the help of our beloved contributors!  ","version":"Next","tagName":"h2"},{"title":"Q: What engine is being used to develop Pixelorama? Where is the code hosted?​","type":1,"pageTitle":"FAQ","url":"/Pixelorama-Docs/faq#q-what-engine-is-being-used-to-develop-pixelorama-where-is-the-code-hosted","content":" A: Pixelorama is being developed with the Godot Engine (version 4.3), and since it is open-source anyone can contribute to it! The code is available on Pixelorama's GitHub repository!  ","version":"Next","tagName":"h2"},{"title":"Q: Why is Godot used to develop Pixelorama?​","type":1,"pageTitle":"FAQ","url":"/Pixelorama-Docs/faq#q-why-is-godot-used-to-develop-pixelorama","content":" A: Mostly because it's easy to use, while being powerful at the same time. If we started Pixelorama using plain C++ or something like that it would be much more primitive and the development would be a lot slower. Features such as the image and layer effects, 3D layers, the extension system and others would be a lot harder to implement without Godot. Most of the community came from Godot, so if Godot wasn't used, it would also be less popular and it would have less contributors, leading to even less features and polish. Godot handles a lot of stuff for us already behind the scenes, and pretty much most major Godot releases also bring visible improvements to Pixelorama without us having to do big changes. Having to do all of that from scratch would be exhausting.  Pixelorama started as an experiment to see if making such a software in Godot is possible. The first time we showed it to Godot's community, we mostly did it to show what we could do with Godot, We weren't expecting anyone to actually use it, but we did want to make a proper pixel art software so we decided to keep improving it so it would become usable.  ","version":"Next","tagName":"h2"},{"title":"Q: Can I contribute to this project?​","type":1,"pageTitle":"FAQ","url":"/Pixelorama-Docs/faq#q-can-i-contribute-to-this-project","content":" Yes! Read our Ways to Contribute page to learn more.  ","version":"Next","tagName":"h2"},{"title":"Q: Will Pixelorama ever become Godot's Plugin?​","type":1,"pageTitle":"FAQ","url":"/Pixelorama-Docs/faq#q-will-pixelorama-ever-become-godots-plugin","content":" A: Pixelorama was originally created as a stand-alone program. Our current focus is to keep improving it and not implementing it into Godot itself, but we are not declining the possibility of it being a plugin one day. However, if you are interested in direct Pixelorama support from Godot, you can use the amazing Importality plugin which can be used to make Godot import pxo files. For best results, make sure to enable &quot;Include blended images&quot; when saving your pxo files from Pixelorama. ","version":"Next","tagName":"h2"},{"title":"Internal Extensions","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/extension_system/internal_extensions","content":"","keywords":"","version":"Next"},{"title":"Comparing the two methods​","type":1,"pageTitle":"Internal Extensions","url":"/Pixelorama-Docs/extension_system/internal_extensions#comparing-the-two-methods","content":" Internal Extensions\tStandard way (as separate project)Both ways are easily interchangeable\tBoth ways are easily interchangeable During development you don't have to export a pck, every time you need to debug the extension\tTo debug you'd have to re-export your extension which is time consuming Pixelorama's source code is required\tCreating the Extension project is required but Pixelorama's source code is optional You can extend pixelorama's classes (like BaseTool)\tYou can still extend classes, but Godot's code editor will complain (it's perfectly fine but it's not very pleasing to the eye)  ","version":"Next","tagName":"h2"},{"title":"Making an Internal Extension​","type":1,"pageTitle":"Internal Extensions","url":"/Pixelorama-Docs/extension_system/internal_extensions#making-an-internal-extension","content":" converting external extension The process for converting an existing external extension into an internal extension is almost the same as this. Instead of making files (step 3), you copy them over.  Get and unzip the source code of pixelorama that you intend to use for your extension. Create an Extensions folder (case sensitive) in the pixelorama's source code inside the res://src folder. Make the necessary files mentioned in step 2 of this tutorial. Your directory structure will resemble something like this Navigate to the res://src/Extensions/(extension name)/extension.json file and copy the value of the name key. Then open res://src/HandleExtensions.gd file in pixelorama's source and find the _add_internal_extensions() method. Modify and save it as follows: func _add_internal_extensions() -&gt; void: _load_extension(&quot;Example&quot;, true) # Add this line, and replace `Example` with the value of your `name` key.   Now the extension has become internal. From here you can continue to code in the res://src/Extensions/&lt;your extension&gt; folder of pixelorama (just don't create any files in outside your extension folder).  Accessing the API In an internal extension, prefer using ExtensionsApi autoload directly instead of get_node_or_null(&quot;/root/ExtensionsApi&quot;)  ","version":"Next","tagName":"h2"},{"title":"Exporting an Internal Extension​","type":1,"pageTitle":"Internal Extensions","url":"/Pixelorama-Docs/extension_system/internal_extensions#exporting-an-internal-extension","content":" When you are ready to release/distribute your extension to the public, you may choose one of the following ways.  ","version":"Next","tagName":"h2"},{"title":"Converting an Internal Extension into an External one​","type":1,"pageTitle":"Internal Extensions","url":"/Pixelorama-Docs/extension_system/internal_extensions#converting-an-internal-extension-into-an-external-one","content":" These steps are basically the reverse of the steps mentioned in the previous section.  Make a new Godot project called &quot;Example&quot; (the project name is irrelevant but for simplicity we'll name it the same as our extension). Remove/comment the line that was added to res://src/HandleExtensions.gd (In step 5 of Making an Extension, internal). This step is not compulsory but is mentioned anyway for the sake of completeness. From Pixelorama, move/cut your extension folder from res://src/Extensions/Example, To the res://src/Extensions/Example folder of your project (replacing existing files). Now you can safely delete pixelorama's source code if you want (or use it for some other extension). Export your extension, using steps from this tutorial.  ","version":"Next","tagName":"h3"},{"title":"Direct export of Internal Extension​","type":1,"pageTitle":"Internal Extensions","url":"/Pixelorama-Docs/extension_system/internal_extensions#direct-export-of-internal-extension","content":" Internal extensions can be exported directly instead of first converting it to an external extension.  Form the Godot editor, go to Project -&gt; Export.... In the Export dialog, add a new preset (any preset will work) and go to the Resources tab. Write *.json in 'Filters to export non-resource files/folders'. and in Export Mode, Choose 'Export selected resources (and dependencies)' and select only your extension files as shown below. Press the Export PCK/ZIP button and export with the same name as your extension. ","version":"Next","tagName":"h3"},{"title":"Compiling from Source","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/source","content":"Compiling from Source To compile Pixelorama's source code, all you have to do is download Godot 4.3. You don't need the mono version since Pixelorama is written entirely with GDScript. Then, you clone Pixelorama from its GitHub repository, load the project within Godot, and run it! Simple as that! If you wish to export Pixelorama as a standalone executable to a platform, you can refer to the relevant page of the documentation of Godot: https://docs.godotengine.org/en/stable/tutorials/export/exporting_projects.html","keywords":"","version":"Next"},{"title":"ExtensionsApi","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/extension_system/extension_api","content":"","keywords":"","version":"Next"},{"title":"Description​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#description","content":" This Api gives you the essentials to develop a working extension for Pixelorama. To keep things organized, the Api is divided into many smaller Apis, each giving access to different areas of the Software;  To access this anywhere in the extension use get_node_or_null(&quot;/root/ExtensionsApi&quot;) e.g.  var api = get_node_or_null(&quot;/root/ExtensionsApi&quot;)   tip Keep in mind that this API is targeted towards users who are not fully familiar with Pixelorama's source code. If you need to do something more complicated and more low-level, you would need to interact directly with the source code.  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#properties","content":" generalmenudialogpanelthemetoolsselectionprojectexportimportpalettesignals  ","version":"Next","tagName":"h3"},{"title":"Method Descriptions​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#method-descriptions","content":" int get_api_version() Returns the version of the ExtensionsApi . Array[Node] get_main_nodes(extension_name: StringName) Returns the initial nodes of an extension named extension_name. initial nodes are the nodes whose paths are in the nodes key of an extension.json file. Extensions can be made to communicate with each other using this method.  ","version":"Next","tagName":"h3"},{"title":"GeneralAPI​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#generalapi","content":" ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#description-1","content":" This part of Api provides the general stuff, like commonly used Autoloads, App's version info etc. The most basic (but important) stuff.  ","version":"Next","tagName":"h3"},{"title":"Method Descriptions​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#method-descriptions-1","content":" String get_pixelorama_version() Returns the current version of pixelorama. ConfigFile get_config_file() Returns the ConfigFile containing all Pixelorama settings (e.g. Brushes, sizes, preferences, etc...). &quot;src/Autoload/Global.gd&quot; get_global() Returns the Global autoload used by Pixelorama. Contains references to almost all UI Elements, Variables that indicate different settings etc..., In short it is the most important autoload of Pixelorama. &quot;src/Autoload/DrawingAlgos.gd&quot; get_drawing_algos() Returns the DrawingAlgos autoload, contains different drawing algorithms used by Pixelorama. ShaderImageEffect get_shader_image_effect() Gives you a new ShaderImageEffect class. this class can apply shader to an image. It contains method: generate_image(img: Image, shader: Shader, params: Dictionary, size: Vector2)Whose parameters are identified as: Parameter\tDescriptionimg\tImage that the shader will be pasted to (Empty Image of size same as project). shader\tpreload of the shader. params\tA dictionary of params used by the shader. size\tIt is the project's size. Node get_extensions_node() Returns parent of the nodes listed in extension.json -&gt; &quot;nodes&quot;. Canvas get_canvas() Returns the main Canvas node, normally used to add a custom preview to the canvas. ValueSlider create_value_slider() Returns a new ValueSlider. Useful for editing floating values. ValueSliderV2 create_value_slider_v2() Returns a new ValueSliderV2. Useful for editing 2D vectors. ValueSliderV3 create_value_slider_v3() Returns a new ValueSliderV3. Useful for editing 3D vectors.  ","version":"Next","tagName":"h3"},{"title":"MenuAPI​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#menuapi","content":" ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#description-2","content":" Gives ability to add/remove items from menus in the top bar.  ","version":"Next","tagName":"h3"},{"title":"Enumerations​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#enumerations","content":" enum @unnamed_enums:  FILE = 0EDIT = 1SELECT = 2PROJECT = 3EFFECTS = 4VIEW = 5WINDOW = 6HELP = 7  ","version":"Next","tagName":"h3"},{"title":"Method Descriptions​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#method-descriptions-2","content":" int add_menu_item(menu_type: int, item_name: String, item_metadata: Variant, item_id := -1) Adds a menu item of title item_name to the menu_type defined by @unnamed_enums.item_metadata is usually a window node you want to appear when you click the item_name. That window node should also have a menu_item_clicked() -&gt; void function inside its script. Index of the added item is returned (which can be used to remove menu item later on). void remove_menu_item(menu_type: int, item_idx: int) Removes a menu item at index item_idx from the menu_type defined by @unnamed_enums.  ","version":"Next","tagName":"h3"},{"title":"DialogAPI​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#dialogapi","content":" ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#description-3","content":" Gives access to common dialog related functions.  ","version":"Next","tagName":"h3"},{"title":"Method Descriptions​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#method-descriptions-3","content":" void show_error(text: String) Shows an alert dialog with the given text. Useful for displaying messages like &quot;Incompatible API&quot; etc... Node get_dialogs_parent_node() Returns the node that is the parent of dialogs used in pixelorama. void dialog_open(open: bool) Informs Pixelorama that some dialog is about to open or close.  ","version":"Next","tagName":"h3"},{"title":"PanelAPI​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#panelapi","content":" ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#description-4","content":" Gives access to Tabs and Dockable Container related functions.  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#properties-1","content":" Name\tDescriptionbool tabs_visible\tSets/Gets the visibility of dockable tabs.  ","version":"Next","tagName":"h3"},{"title":"Method Descriptions​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#method-descriptions-4","content":" void add_node_as_tab(node: Node) Adds the node as a tab. Initially it's placed on the same panel as the tools tab, but it's position can be changed through editing a layout. void remove_node_from_tab(node: Node) Removes the node from the DockableContainer.  ","version":"Next","tagName":"h3"},{"title":"ThemeAPI​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#themeapi","content":" ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#description-5","content":" Gives access to theme related functions.  ","version":"Next","tagName":"h3"},{"title":"Method Descriptions​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#method-descriptions-5","content":" &quot;src/Autoload/Themes.gd&quot; autoload() Returns the Themes autoload. Allows interactions with themes on a more deeper level. void add_theme(theme: Theme) Adds the theme to Edit &gt; Preferences &gt; Interface &gt; Themes. int find_theme_index(theme: Theme) Returns index of the theme in preferences. Theme get_theme() Returns the current theme resource. bool set_theme(idx: int) Sets a theme located at a given idx in preferences. If theme set successfully then return true, else false. void remove_theme(theme: Theme) Remove the theme from preferences. void add_font(font: Font) Adds a new font. void remove_font(font: Font) Removes a loaded font. If that font is the current one of the interface, the font gets changed to Roboto. void set_font(font: Font) Sets a font as the current one for the interface. The font must have been added beforehand by add_font().  ","version":"Next","tagName":"h3"},{"title":"ToolAPI​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#toolapi","content":" ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#description-6","content":" Gives ability to add/remove tools.  ","version":"Next","tagName":"h3"},{"title":"Enumerations​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#enumerations-1","content":" enum LayerTypes:  PIXEL = 0GROUP = 1THREE_D = 2TILEMAP = 3AUDIO = 4  ","version":"Next","tagName":"h3"},{"title":"Method Descriptions​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#method-descriptions-6","content":" &quot;src/Autoload/Tools.gd&quot; autoload() Returns the Tools autoload. Allows interactions with tools on a more deeper level. void add_tool(tool_name: String, display_name: String, scene: PackedScene, layer_types: PoolIntArray = [], extra_hint := &quot;&quot;, shortcut: String, extra_shortucts := [], insert_point := -1) Adds a tool to pixelorama with name tool_name (without spaces), display name display_name, tool scene scene, layers that the tool works on layer_types defined by LayerTypes, extra_hint (text that appears when mouse havers tool icon), primary shortcut name shortcut and any extra shortcuts extra_shortucts. At the moment extensions can't make their own shortcuts so you can leave shortcut and extra_shortcuts as []. To determine the position of tool in tool list, use insert_point (if you leave it empty then the added tool will be placed at bottom) Your tool must have a script attached to it with the following updaters inside (Pixelorama's tool system expects these to be present inside a tool). extends VBoxContainer ## Or whatever your tool extends ## Reference to the tool's slot (assigned by Tools autoload). var tool_slot ## Tools autoload displays it's content to the cursor label at top menu. var cursor_text := &quot;&quot; ## Gets called whenever tool starts drawing. func draw_start(pos: Vector2i) -&gt; void: pass ## Gets called whenever tool moves (during drawing only). func draw_move(pos: Vector2i) -&gt; void: pass ## Gets called when tool stops drawing. func draw_end(pos: Vector2i) -&gt; void: pass ## Gets called whenever tool's cursor moves func cursor_move(pos: Vector2i) -&gt; void: return ## Gets called whenever tool's cursor moves ## (You are allowed to use functions associated with _draw() here) func draw_indicator(left: bool) -&gt; void: return ## Whenever tool's preview is required. ## (You are allowed to use functions associated with _draw() here) func draw_preview() -&gt; void: pass void remove_tool(tool_name: String) Removes a tool with name tool_name and assign Pencil as left tool, Eraser as right tool.  ","version":"Next","tagName":"h3"},{"title":"SelectionAPI​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#selectionapi","content":" ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#description-7","content":" Gives access to pixelorama's selection system.  ","version":"Next","tagName":"h3"},{"title":"Method Descriptions​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#method-descriptions-7","content":" void clear_selection() Clears the selection Gizmo. void select_all() Select the entire region of current cel. void select_rect(rect: Rect2, operation: int) Selects a portion defined by rect of the current cel. operation influences it's behaviour with previous selection rects (0 for adding, 1 for subtracting, 2 for intersection). void move_selection(destination: Vector2, with_content: bool, transform_standby: bool) Moves a selection to destination, with content if with_content is true. If transform_standby is true then the transformation will not be applied immediately unless Enter is pressed. void resize_selection(new_size: Vector2, with_content: bool, transform_standby: bool) Resizes the selection to new_size, with content if with_content is true. If transform_standby is true then the transformation will not be applied immediately unless Enter is pressed. void invert() Inverts the selection gizmo. void make_brush() Makes a project brush out of the current selection's content. Image get_enclosed_image() Returns the portion of current cel's image enclosed by the selection. It's similar to make_brush() but it returns the image instead. void copy() Copies the selection content (works in or between pixelorama instances only). void paste(in_place: bool) Pastes the selection content. void delete_content() Erases the drawing on current cel enclosed within the selection's area.  ","version":"Next","tagName":"h3"},{"title":"ProjectAPI​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#projectapi","content":" ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#description-8","content":" Gives access to basic project manipulation functions.  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#properties-2","content":" Name\tDescriptionProject current_project\tSets/Gets project currently in focus.  ","version":"Next","tagName":"h3"},{"title":"Method Descriptions​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#method-descriptions-8","content":" Project new_project(frames: Array[Frame] = [], name: String = tr(&quot;untitled&quot;), size: Vector2 = Vector2(64, 64), fill_color: Color = Color.TRANSPARENT) Creates a new project (with new tab) with name name, size size, fill color fill_color and frames frames. The created project also gets returned. frames is an Array of type Frames. Usually it can be left as []. Project new_empty_project(name: String = tr(&quot;untitled&quot;)) Creates and returns a new Project in a new tab, with an optional name. Unlike new_project(), no starting frame/layer gets created. Useful if you want to deserialize project data. Dictionary get_project_info(project: Project) Returns a dictionary containing all the project information. void select_cels(selected_array := [[0, 0]]) Selects the cels and makes the last entry of selected_array as the current cel. selected_array is an Array of Arrays containing 2 integers (frame &amp; layer respectively). Frames are counted from left to right, layers are counted from bottom to top. Frames/layers start at &quot;0&quot; and end at project.frames.size() - 1 and project.layers.size() - 1 respectively. BaseCel get_current_cel() Returns the current cel. Cel type can be checked using function get_class_name() located inside the cel. It's type can be GroupCel, PixelCel, Cel3D, CelTileMap, AudioCel or BaseCel. BaseCel get_cel_at(project: Project, frame: int, layer: int) Frames are counted from left to right, layers are counted from bottom to top. Frames/layers start at &quot;0&quot; and end at project.frames.size() - 1 and project.layers.size() - 1 respectively. void set_pixelcel_image(image: Image, frame: int, layer: int) Sets an image at frame and layer on the current project. Frames are counted from left to right, layers are counted from bottom to top. void add_new_frame(after_frame: int) Adds a new frame in the current project after frame after_frame. void add_new_layer(above_layer: int, name := &quot;&quot;, type: res://src/Autoload/Global.gd.LayerTypes = 0) Adds a new Layer of type type with name name in the current project above layer above_layer (above_layer = 0 is the bottom-most layer and so on). type\tclass0\tPixelLayer 1\tGroupLayer 2\t3DLayer 3\tLayerTileMap 4\tAudioLayer  ","version":"Next","tagName":"h3"},{"title":"ExportAPI​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#exportapi","content":" ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#description-9","content":" Gives access to adding custom exporters.  ","version":"Next","tagName":"h3"},{"title":"Enumerations​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#enumerations-2","content":" enum ExportTab:  IMAGE = 0SPRITESHEET = 1  ","version":"Next","tagName":"h3"},{"title":"Method Descriptions​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#method-descriptions-9","content":" &quot;src/Autoload/Export.gd&quot; autoload() Returns the Export autoload. Allows interactions with the export workflow on a more deeper level. int add_export_option(format_info: Dictionary, exporter_generator: Object, tab := ExportTab.IMAGE, is_animated := true) format_info has keys: extension and description whose values are of type String e.g: format_info = {&quot;extension&quot;: &quot;.gif&quot;, &quot;description&quot;: &quot;GIF Image&quot;} exporter_generator is a node with a script containing the method override_export() which takes 1 argument of type Dictionary which is automatically passed to override_export() at time of export and contains keys: processed_images, export_dialog, export_paths, project (Note: processed_images is an array of ProcessedImage resource which further has parameters image and duration) If the value of tab is not in ExportTab then the format will be added to both tabs. Returns the id of exporter, which can be used to remove exporter later. void remove_export_option(id: int) Removes the exporter having the given id from Pixelorama.  ","version":"Next","tagName":"h3"},{"title":"ImportAPI​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#importapi","content":" ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#description-10","content":" Gives access to adding custom exporters.  ","version":"Next","tagName":"h3"},{"title":"Method Descriptions​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#method-descriptions-10","content":" &quot;src/Autoload/OpenSave.gd&quot; open_save_autoload() Returns the OpenSave autoload. Contains code to handle file loading and project saving (.pxo). &quot;src/Autoload/Import.gd&quot; import_autoload() Returns the Import autoload. Manages import of brushes and patterns. int add_import_option(import_name: StringName, import_scene_preload: PackedScene) import_scene is a scene preload that will be instanced and added to &quot;import options&quot; section of pixelorama's import dialogs and will appear whenever import_name is chosen from import menu. import_scene must have a script containing: An optional variable named import_preview_dialog of type ConfirmationDialog, If present, it will automatically be assigned a reference to the relevant import dialog's ImportPreviewDialog class so that you can easily access variables and methods of that class. (This variable is meant to be read-only)The method initiate_import(), which takes 2 arguments: path, image. Values will automatically be passed to these arguments at the time of import. Returns the id of the importer. void remove_import_option(id: int) Removes the import option with id from Pixelorama.  ","version":"Next","tagName":"h3"},{"title":"PaletteAPI​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#paletteapi","content":" ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#description-11","content":" Gives access to palette related stuff.  ","version":"Next","tagName":"h3"},{"title":"Method Descriptions​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#method-descriptions-11","content":" &quot;src/Autoload/Palettes.gd&quot; autoload() Returns the Palettes autoload. Allows interacting with palettes on a more deeper level. void create_palette_from_data(palette_name: String, data: Dictionary) Creates and adds a new palette with name palette_name containing data. data is a Dictionary containing the palette information. An example of data will be: { &quot;colors&quot;: [ { &quot;color&quot;: &quot;(0, 0, 0, 1)&quot;, &quot;index&quot;: 0 }, { &quot;color&quot;: &quot;(0.1294, 0.1216, 0.2039, 1)&quot;, &quot;index&quot;: 1 }, { &quot;color&quot;: &quot;(0.2667, 0.1569, 0.2314, 1)&quot;, &quot;index&quot;: 2 } ], &quot;comment&quot;: &quot;Place comment here&quot;, &quot;height&quot;: 4, &quot;width&quot;: 8 }   ","version":"Next","tagName":"h3"},{"title":"SignalsAPI​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#signalsapi","content":" ","version":"Next","tagName":"h2"},{"title":"Description​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#description-12","content":" Gives access to the basic commonly used signals. Some less common signals are not mentioned in Api but could be accessed through source directly.  ","version":"Next","tagName":"h3"},{"title":"Method Descriptions​","type":1,"pageTitle":"ExtensionsApi","url":"/Pixelorama-Docs/extension_system/extension_api#method-descriptions-12","content":" void signal_pixelorama_opened(callable: Callable, is_disconnecting := false) Connects/disconnects a signal to callable, that emits when pixelorama is just opened. void signal_pixelorama_about_to_close(callable: Callable, is_disconnecting := false) Connects/disconnects a signal to callable, that emits when pixelorama is about to close. void signal_project_created(callable: Callable, is_disconnecting := false) Connects/disconnects a signal to callable, that emits whenever a new project is created.Binds: It has one bind of type Project which is the newly created project void signal_project_saved(callable: Callable, is_disconnecting := false) Connects/disconnects a signal to callable, that emits after a project is saved. void signal_project_switched(callable: Callable, is_disconnecting := false) Connects/disconnects a signal to callable, that emits whenever you switch to some other project. void signal_cel_switched(callable: Callable, is_disconnecting := false) Connects/disconnects a signal to callable, that emits whenever you select a different cel. void signal_project_data_changed(callable: Callable, is_disconnecting := false) Connects/disconnects a signal to callable, that emits whenever the project data are being modified. void signal_tool_color_changed(callable: Callable, is_disconnecting := false) Connects/disconnects a signal to callable, that emits whenever a tool changes color.Binds: It has two bind of type Color (indicating new color) and int (Indicating button that tool is assigned to, see @GlobalScope.MouseButton) void signal_timeline_animation_started(callable: Callable, is_disconnecting := false) Connects/disconnects a signal to callable, that emits whenever timeline animation starts. Binds: It has one bind of type bool which indicated if animation is in forward direction (true) or backward direction (false) void signal_timeline_animation_finished(callable: Callable, is_disconnecting := false) Connects/disconnects a signal to callable, that emits whenever timeline animation stops. void signal_current_cel_texture_changed(callable: Callable, is_disconnecting := false) Connects/disconnects a signal to callable, that emits whenever you select a different cel. void signal_export_about_to_preview(callable: Callable, is_disconnecting := false) Connects/disconnects a signal to callable, that emits whenever preview is about to be drawn. Binds: It has one bind of type Dictionary with keys: exporter_id, export_tab, preview_images. Use this if you plan on changing preview of export. (Note: preview_images is an array of ProcessedImage resource which further has parameters image and duration) ","version":"Next","tagName":"h3"},{"title":"Command Line Interface","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/user_manual/cli","content":"","keywords":"","version":"Next"},{"title":"Options​","type":1,"pageTitle":"Command Line Interface","url":"/Pixelorama-Docs/user_manual/cli#options","content":" For the full list of the system options, you can refer to Godot's documentation. Only the options that have the green checkbox icon in their description can be used in Pixelorama.  Usage: Pixelorama.x86_64 [SYSTEM OPTIONS] -- [USER OPTIONS] [FILES]... Use -h in place of [SYSTEM OPTIONS] to see [SYSTEM OPTIONS]. Or use -h in place of [USER OPTIONS] to see [USER OPTIONS]. Some useful [SYSTEM OPTIONS] are: --headless Run in headless mode. --quit Close pixelorama after current command. [USER OPTIONS]: (The terms in [ ] reflect the valid type for corresponding argument). --version, --pixelorama-version Prints current Pixelorama version --size Prints size of the given project --framecount Prints total frames in the current project --export, -e Indicates given project should be exported --spritesheet, -s Indicates given project should be exported as spritesheet --output, -o [path] Name of output file (with extension) --scale [integer] Scales up the export image by a number --frames, -f [integer-integer] Used to specify frame range --direction, -d [0, 1, 2] Specifies direction --json Export the JSON data of the project --split-layers Each layer exports separately --help, -h, -? Displays this help page  ","version":"Next","tagName":"h2"},{"title":"Examples","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/extension_system/extension_examples","content":"","keywords":"","version":"Next"},{"title":"Bare Minimum​","type":1,"pageTitle":"Examples","url":"/Pixelorama-Docs/extension_system/extension_examples#bare-minimum","content":" The most basic code.  extends Node # This script acts as a setup for the extension func _enter_tree() -&gt; void: pass func _exit_tree() -&gt; void: # Extension is being uninstalled or disabled # remember to remove things that you added using this extension pass   ","version":"Next","tagName":"h3"},{"title":"Add new Tab​","type":1,"pageTitle":"Examples","url":"/Pixelorama-Docs/extension_system/extension_examples#add-new-tab","content":" Adds a simple Panel as a tab, which will be placed at the same place as the Tools tab by default.  extends Node @onready var extension_api: Node # Variable for keeping reference to the Api # some references to nodes that will be created later var panel # This script acts as a setup for the extension func _enter_tree() -&gt; void: extension_api = get_node_or_null(&quot;/root/ExtensionsApi&quot;) # Accessing the Api # add a test panel as a tab (this is an example) the tab is located at the same # place as the (Tools tab) by default panel = Panel.new() panel.name = &quot;This is a new panel&quot; # This is optional extension_api.panel.add_node_as_tab(panel) func _exit_tree() -&gt; void: # Extension is being uninstalled or disabled # remember to remove things that you added using this extension extension_api.panel.remove_node_from_tab(panel)   ","version":"Next","tagName":"h3"},{"title":"Add Menu Item​","type":1,"pageTitle":"Examples","url":"/Pixelorama-Docs/extension_system/extension_examples#add-menu-item","content":" Adds a menu item in Help menu, which displays a message when clicked on it.  extends Node @onready var extension_api: Node # Variable for keeping reference to the Api var item_id: int # This script acts as a setup for the extension func _enter_tree() -&gt; void: extension_api = get_node_or_null(&quot;/root/ExtensionsApi&quot;) # Accessing the Api var type = extension_api.menu.HELP item_id = extension_api.menu.add_menu_item(type, &quot;Show Message&quot;, self) # the 3rd argument (in this case &quot;self&quot;) will try to call &quot;menu_item_clicked&quot; # (if it is present) func menu_item_clicked(): # Do some stuff extension_api.dialog.show_error(&quot;You Tickled Me :)&quot;) func _exit_tree() -&gt; void: # Extension is being uninstalled or disabled # remember to remove things that you added using this extension extension_api.menu.remove_menu_item(extension_api.menu.HELP, item_id)   ","version":"Next","tagName":"h3"},{"title":"Add a Theme​","type":1,"pageTitle":"Examples","url":"/Pixelorama-Docs/extension_system/extension_examples#add-a-theme","content":" Adds a theme to pixelorama Preferences &gt; Interface &gt; Themes (you need to have a theme resource beforehand and that theme resource must derive from one of the main pixelorama themes)  extends Node @onready var extension_api: Node # Variable for keeping reference to the Api var theme = load(&quot;res://path_to_some_theme.tres&quot;) # Replace this with your theme resource # your theme resource must be a derivative of themes from # https://github.com/Orama-Interactive/Pixelorama/tree/master/assets/themes # or else a CRASH might occur # if a theme from the extension was set in preferences, then it will be automatically be # set when pixelorama is launched again func _enter_tree() -&gt; void: extension_api = get_node_or_null(&quot;/root/ExtensionsApi&quot;) # Accessing the Api if theme: extension_api.theme.add_theme(theme) # Adds the theme to preferences func _exit_tree() -&gt; void: # Extension is being uninstalled or disabled if theme: extension_api.theme.remove_theme(theme) # Adds the theme to preferences   ","version":"Next","tagName":"h3"},{"title":"Change Font​","type":1,"pageTitle":"Examples","url":"/Pixelorama-Docs/extension_system/extension_examples#change-font","content":" Sometimes you only need a different font instead of a different theme. This is much easier to achieve than adding themes.(you need to have a .ttf font resource beforehand)  extends Node # used If your goal is to only use a different font @onready var extension_api: Node # Variable for keeping reference to the Api var font_res = load(&quot;res://path_to_some_font.ttf&quot;) # Replace this with your font resource var old_font # This script acts as a setup for the extension func _enter_tree() -&gt; void: extension_api = get_node_or_null(&quot;/root/ExtensionsApi&quot;) # Accessing the Api if font_res: old_font = extension_api.general.get_global().control.theme.default_font.font_data #set the new font extension_api.general.get_global().control.theme.default_font.font_data = font_res func _exit_tree() -&gt; void: if font_res and old_font: #set the default font back again extension_api.general.get_global().control.theme.default_font.font_data = old_font   ","version":"Next","tagName":"h3"},{"title":"Project Manipulation​","type":1,"pageTitle":"Examples","url":"/Pixelorama-Docs/extension_system/extension_examples#project-manipulation","content":" Wish to automate some project behaviour? this will demonstrate some of the basic functions provided by the project api. This example adds a menu button to the edit menu and on clicking it some project manipulations (instructed in menu_item_clicked()) will get carried out.  extends Node # I will show you some common stuff to manipulate projects # (I will make use of the menu api as well) # To know the available methods of (timeline) see: # https://github.com/Orama-Interactive/Pixelorama/blob/master/src/UI/Timeline/AnimationTimeline.gd # NOTE: some more advanced methods can be accessed from timeline node (un-comment line below to get them) #@onready var timeline = ExtensionsApi.general.get_global().animation_timeline @onready var extension_api: Node # Variable for keeping reference to the Api var item_id: int var type: int func _enter_tree() -&gt; void: extension_api = get_node_or_null(&quot;/root/ExtensionsApi&quot;) # Accessing the Api type = extension_api.menu.EDIT item_id = extension_api.menu.add_menu_item(type, &quot;Click Me 4 times&quot;, self) func _exit_tree() -&gt; void: # Extension is being uninstalled or disabled # remember to remove things that you added using this extension extension_api.menu.remove_menu_item(type, item_id) ################## Test Project methods whenever we click the menu button ############ var thing_to_do := 0 var new_project var dest_img: Image func menu_item_clicked(): # Do some stuff if thing_to_do == 0: # get an image (For testing) from the current cel dest_img = extension_api.project.get_current_cel().get_image() # also make a new project var frames := Array([], TYPE_OBJECT, &amp;&quot;RefCounted&quot;, load(&quot;res://src/Classes/Frame.gd&quot;)) new_project = extension_api.project.new_project(frames, &quot;Test&quot;, Vector2(64, 64)) if thing_to_do == 1: # To change something or get something in a project we must make it our &quot;current_project&quot; first extension_api.project.switch_to(new_project) if thing_to_do == 2: # Add 3 frames (the new_project will now have 4 total frames) for i in range(3): extension_api.project.add_new_frame(0) if thing_to_do == 3: # Add a PixelLayer extension_api.project.add_new_layer(0, &quot;I Love Pixelorama&quot;) if thing_to_do == 4: # Now change content at {frame 3, layer 1} of &quot;new_project&quot; extension_api.project.set_pixelcel_image(dest_img, 2, 0) # {frame 3, layer 1} thing_to_do += 1   ","version":"Next","tagName":"h3"},{"title":"Custom Exporter​","type":1,"pageTitle":"Examples","url":"/Pixelorama-Docs/extension_system/extension_examples#custom-exporter","content":" Adds a basic custom exporter that will export only odd frames.  extends Node @onready var extension_api: Node # Variable for keeping reference to the Api var id: int func _enter_tree() -&gt; void: extension_api = get_node_or_null(&quot;/root/ExtensionsApi&quot;) # Accessing the Api var exporter_info := {&quot;extension&quot;: &quot;.png&quot;, &quot;description&quot;: &quot;Only Alternate Frames&quot;} id = extension_api.exports.add_export_option( exporter_info, self, extension_api.exports.ExportTab.IMAGE, false ) # 2nd argument (in this case &quot;self&quot;) must have &quot;override_export()&quot; in it's script func _exit_tree() -&gt; void: # remember to remove things that you added using this extension extension_api.exports.remove_export_option(id) func override_export(details: Dictionary) -&gt; bool: # in this function you take control of image processing and saving from pixelorama # return true for SUCCESS, false for FAILURE # the (details) include everything you could possibly need for exporting # keys of (details) are: # &quot;processed_images&quot;, &quot;durations&quot;, &quot;export_dialog&quot;, &quot;export_paths&quot;, &quot;project&quot; for i in range(0, details[&quot;processed_images&quot;].size(), 2): var image: Image = details[&quot;processed_images&quot;][i].image var error := image.save_png(details[&quot;export_paths&quot;][i]) if error != OK: return false return true  ","version":"Next","tagName":"h3"},{"title":"Troubleshooting","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/troubleshooting","content":"","keywords":"","version":"Next"},{"title":"Some things stopped working after the update!​","type":1,"pageTitle":"Troubleshooting","url":"/Pixelorama-Docs/troubleshooting#some-things-stopped-working-after-the-update","content":" After updating pixelorama, if some things like tools or effects stop working, some extension may be causing this behavior due to some file conflicts, try to update your extensions as soon as possible or uninstall them if there is none (Disabling the extension won't fix it).  ","version":"Next","tagName":"h2"},{"title":"Pixelorama crashed while I was working on my project!​","type":1,"pageTitle":"Troubleshooting","url":"/Pixelorama-Docs/troubleshooting#pixelorama-crashed-while-i-was-working-on-my-project","content":" Crashes are unfortunate, and while we are doing our best to fix them, some issues causing the application to crash may have escaped our grasp. The good news is that you can enable automatic backups, that save your work every a certain time interval. You can enable them from the Edit menu, Preferences, Backup and then by ticking on &quot;Enable autosave&quot;.    Besides that, it is strongly recommended that you save often, and keep copies of your files as backups in case something gets lost.  You can also aid us in our fight against crashes by reporting issues on GitHub and uploading the content of Pixelorama's log files. You can find the log files in C:\\Users\\[USERNAME]\\AppData\\Roaming\\Pixelorama\\logs on Windows, ~/.local/share/Pixelorama/logs on Linux and /Users/[USERNAME]/Library/Application Support/Pixelorama/logs for macOS. It is also extremely helpful, if not necessary, to be as specific as possible with the steps that led to the crash. By giving us specific steps to reproduce the issue, we can solve it faster.  ","version":"Next","tagName":"h2"},{"title":"My images are being saved as pxo files, and not png, jpg, gif, etc​","type":1,"pageTitle":"Troubleshooting","url":"/Pixelorama-Docs/troubleshooting#my-images-are-being-saved-as-pxo-files-and-not-png-jpg-gif-etc","content":" You are saving instead of exporting. Saving creates pxo files, which are Pixelorama's custom file format for projects. To create image files such as png, you need to go to the File menu and select Export. You can refer to the Save and Export page for more information.  ","version":"Next","tagName":"h2"},{"title":"Windows Defender flags Pixelorama!​","type":1,"pageTitle":"Troubleshooting","url":"/Pixelorama-Docs/troubleshooting#windows-defender-flags-pixelorama","content":" Pixelorama is not signed, so Windows Defender does not trust it. This does not mean that it is a virus, and you can safely ignore these warnings since Pixelorama is safe, as long as you have downloaded it from our official sources.  ","version":"Next","tagName":"h2"},{"title":"macOS says that Pixelorama is damaged!​","type":1,"pageTitle":"Troubleshooting","url":"/Pixelorama-Docs/troubleshooting#macos-says-that-pixelorama-is-damaged","content":"   You may encounter some errors saying that Pixelorama is damaged. This is because the latest versions of MacOS mark the launcher of unknown binaries as a non-executable file. This most likely has to do with the fact that Pixelorama is not signed. Pixelorama is safe, as long as you have downloaded it from our official sources.  Read this guide for more information: https://disable-gatekeeper.github.io/  ","version":"Next","tagName":"h2"},{"title":"I have performance issues, Pixelorama is very slow on my machine​","type":1,"pageTitle":"Troubleshooting","url":"/Pixelorama-Docs/troubleshooting#i-have-performance-issues-pixelorama-is-very-slow-on-my-machine","content":" We are doing our best to optimize the performance. That being said, you can improve the performance of the app significantly by trying the following:  Change the app's maximum framerate, in order to reduce CPU usage. To do that, you can go to the Edit menu, Preferences and then click the Performance tab. There, you can set a maximum value for the FPS in &quot;Set application FPS limit:&quot;. Keep in mind that the lower the number, the lower the CPU usage, but the application gets slower, choppier and unresponsive, so make sure not to set it too low. 0 means that there is no limit. If you have any group layers, try setting their blend mode to &quot;Passthrough&quot;.  If you have a specific performance issue you'd like us to look at, feel free to open an issue on Pixelorama's GitHub Repository.  ","version":"Next","tagName":"h2"},{"title":"I have a hiDPI monitor and the User Interface is very small!​","type":1,"pageTitle":"Troubleshooting","url":"/Pixelorama-Docs/troubleshooting#i-have-a-hidpi-monitor-and-the-user-interface-is-very-small","content":" It is possible to change the scale of the UI, by going to the Edit menu, selecting Preferences and going to the Interface tab. There, you can change the display scale, which goes from 1 (smallest) to 4 (biggest). 4 essentially means that the UI will be 4 times bigger than the default UI. Then, you click Apply to set the changes. Keep in mind that it's best to use integer values, such as 1, 2, 3 and 4, otherwise the UI may appear blurry.  ","version":"Next","tagName":"h2"},{"title":"Error code 12 when exporting png files​","type":1,"pageTitle":"Troubleshooting","url":"/Pixelorama-Docs/troubleshooting#error-code-12-when-exporting-png-files","content":"   This error has only been spotted in the Windows platform. Sometimes, when exporting png files, the process may fail due to &quot;Error code 12&quot;. This most likely happens when you try to export in a directory that is protected by anti-virus software. To resolve it, you can try tweaking the settings of your anti-virus to either whitelist Pixelorama or disable folder protection. We can't guarantee that this will work, as it also depends on what anti-virus software you are using. Alternatively, you can export in a directory that is not protected by the anti-virus.  It is also possible that this issue may be solved if you run Pixelorama as an administrator.  If neither of these works, you could save your projects as a pxo file, open the Web version, drag and drop the pxo file there, and export the png file from the Web version.  ","version":"Next","tagName":"h2"},{"title":"Drawing is very slow when using a drawing tablet​","type":1,"pageTitle":"Troubleshooting","url":"/Pixelorama-Docs/troubleshooting#drawing-is-very-slow-when-using-a-drawing-tablet","content":" If you are on Windows, try changing the tablet driver Pixelorama is using, from the Edit menu, Preferences, Drivers.    ","version":"Next","tagName":"h2"},{"title":"Guides are not being created​","type":1,"pageTitle":"Troubleshooting","url":"/Pixelorama-Docs/troubleshooting#guides-are-not-being-created","content":" To create guides, you have to drag them out from the rulers, on the top and the left of the canvas. However, sometimes this doesn't appear to do anything. If that's the case, then it is very likely that you have disabled guide visibility. To make sure that they are visible, go to the View menu and see if &quot;Show Guides&quot; is ticked on. If it is not, make sure to tick it. ","version":"Next","tagName":"h2"},{"title":"Import","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/user_manual/Import","content":"","keywords":"","version":"Next"},{"title":"Supported image formats​","type":1,"pageTitle":"Import","url":"/Pixelorama-Docs/user_manual/Import#supported-image-formats","content":" The image formats that can be imported are: .png, .apng, .jpg/.jpeg, .webp, .bmp, .svg, .tga, .hdr. Pixelorama can also import more complex image file formats, such as our own .pxo, as well as OpenRaster (.ora), Aseprite's .ase/.aseprite, Krita's .kra, Photoshop's .psd and Piskel's .piskel.  ","version":"Next","tagName":"h2"},{"title":"Import image options​","type":1,"pageTitle":"Import","url":"/Pixelorama-Docs/user_manual/Import#import-image-options","content":" When attempting to import an image, a dialog will appear, containing a preview of the image you want to import, along with options that let you change how you want the image to be imported.  These options include:  New project, that lets you open the image as a new projectSpritesheet (new project), that lets you open the image as a spritesheet in a new project. You can manually set the amount of horizontal and vertical frames, or select &quot;smart slice&quot;, which attempts to figure out the amount of frames in the spritesheet automatically.Spritesheet (new layer). Same as above, but instead of opening the spritesheet in a new project, it opens it as a new layer in the currently active project.New frame, which opens the image as a new frame in the currently active project. You can specify which layer the new frame will belong to.Replace cel, which replaces a cel at the frame and the layer of your choosing, with the imported image in the currently active project.New layer, which opens the image as a new layer in the currently active project. You can specify in which frame the new layer will be at.New reference image, which opens the image as a reference image in the currently active project.New palette, which creates a new palette using the colors of the imported image.New brush, which opens the imported image as a brush. You can choose whether the new brush will be a file brush, a project brush, or a random brush.New pattern, which opens the imported image as a pattern, which can be used by the bucket tool.Tileset, which can be used by tilemap layers. You can manually set the amount of horizontal and vertical slices, or select &quot;smart slice&quot;, which attempts to figure out the amount of frames in the spritesheet automatically.  ","version":"Next","tagName":"h2"},{"title":"Importing multiple images​","type":1,"pageTitle":"Import","url":"/Pixelorama-Docs/user_manual/Import#importing-multiple-images","content":" When importing multiple images at the same time, the import dialogs will also have an &quot;apply to all&quot; checkbox. When toggling this on in a dialog, the rest of the dialogs will hide and all of the imported images will share the same options. This way you can easily import multiple images as multiple projects, frames, layers, etc. The order that they are being imported is backwards, meaning that the the last image that you attempted to import, will be the first one that actually gets opened. For example, if you attempt to import image files named 1.png, 2.png and 3.png in that order as new frames, the first frame would be image 3.png, then 2.png and then 1.png.  ","version":"Next","tagName":"h2"},{"title":"Importing videos​","type":1,"pageTitle":"Import","url":"/Pixelorama-Docs/user_manual/Import#importing-videos","content":" It is also possible to import video and gif files, and Pixelorama will automatically import them as multiple frames. For this, you need FFMPEG. All you have to do is download it if it's not already installed, and then find its executable path and copy it inside Pixelorama, in Edit&gt;Preferences&gt;Startup&gt;FFMPEG. If you have FFMPEG in the PATH environment variable of your Operating System, you can just put &quot;ffmpeg&quot; in the text field in the Preferences, instead of copying the path. Otherwise, make sure to include the entire path to the executable. For example, on Windows, it needs to look something like this: [path_to_ffmpeg]/bin/ffmpeg.exe.  Large files Be careful not to import videos that are too big. Pixelorama is not yet optimized for importing large amount of frames which are common in videos, so it is possible that it will run out of memory and potentially crash.  ","version":"Next","tagName":"h2"},{"title":"Importing Aseprite files​","type":1,"pageTitle":"Import","url":"/Pixelorama-Docs/user_manual/Import#importing-aseprite-files","content":" Pixelorama can import Aseprite files, with the following features supported:  Pixel, group &amp; tilemap layers with their cels and preserved layer hierarchy (groups &amp; children)Linked celsLayer blend modes, visibility/locked/collapsed, layer/cel opacity, layer name, color etcProjects with RGBA, Grayscale* and Indexed color modesFrame tagsFrame durationTilesetsTilemap offset &amp; cell transformations (rotation &amp; flip)User data for projects, layers, frame tags &amp; cels  Does not yet support:  Slices. Will be supported once we add slices (or a similar concept) in Pixelorama. Related: #812Cel extra, color profile, external files &amp; mask.  * Aseprite projects with grayscale color mode are being converted to RGBA color mode when imported in Pixelorama, as Pixelorama does not support this color mode at the moment.  ","version":"Next","tagName":"h2"},{"title":"Importing Krita files​","type":1,"pageTitle":"Import","url":"/Pixelorama-Docs/user_manual/Import#importing-krita-files","content":" Pixelorama can import Krita files, with the following features supported:  Paint, group &amp; vector layers with preserved layer hierarchy (groups &amp; children). Vector layers are currently being rasterized into pixel layers in Pixelorama. This will change once we support vector layers.Layer blend modes, visibility/locked/collapsed, layer/cel opacity, layer name.Animation frames and framerate.Guides.  Does not yet support:  Projects that do not use RGBA with 8-bit color depthThe rest of the layer types and masks.Layer styles.  ","version":"Next","tagName":"h2"},{"title":"Importing Photoshop files​","type":1,"pageTitle":"Import","url":"/Pixelorama-Docs/user_manual/Import#importing-photoshop-files","content":" Pixelorama can import Photoshop files. Support is limited due to the file format's lacking documentation, and it is likely we will never manage to support 100% of its features. The following features are supported:  Raster and group layers with preserved layer hierarchy (groups &amp; children).Layer blend modes, visibility/locked/collapsed, layer/cel opacity, layer name.Animation frames and individual frame time.Guides.  Does not yet support:  Projects that do not use RGBA color depth.Other layer types other than raster layers and groups, and masks.Layer styles. ","version":"Next","tagName":"h2"},{"title":"Installation","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/user_manual/installation","content":"","keywords":"","version":"Next"},{"title":"Steam​","type":1,"pageTitle":"Installation","url":"/Pixelorama-Docs/user_manual/installation#steam","content":" Pixelorama is available on Steam for Windows and Linux. It is paid, as a way to financially support the project. The Steam version is essentially the same as the free version, with some added benefits that come naturally from Steam, such as automatic updates and Steam Achievements.    ","version":"Next","tagName":"h2"},{"title":"Itch.io​","type":1,"pageTitle":"Installation","url":"/Pixelorama-Docs/user_manual/installation#itchio","content":" Pixelorama is available for free on itch.io for Windows, Linux and macOS. You can get it by clicking on &quot;Download Now&quot;. A dialog will appear that lets you set a price for the tool. While donations are appreciated and they help with the development of the software, Pixelorama is a free software and paying is optional. After you decide whether you want to donate or not, you will be taken to the download page, where you can download a version of Pixelorama depending on your operating system.  On the itch.io page, you are also able to run Pixelorama's Web version directly through your browser.&lt;a href=&quot;https://orama-interactive.itch.io/pixelorama&quot;&gt;Pixelorama by Orama Interactive&lt;/a&gt;  ","version":"Next","tagName":"h2"},{"title":"GitHub Releases​","type":1,"pageTitle":"Installation","url":"/Pixelorama-Docs/user_manual/installation#github-releases","content":" Pixelorama is available for free on GitHub for Windows, Linux and macOS. On that page, you can also find previous versions of Pixelorama, but it is recommended to always download the most recent one.  ","version":"Next","tagName":"h2"},{"title":"Windows​","type":1,"pageTitle":"Installation","url":"/Pixelorama-Docs/user_manual/installation#windows","content":" Windows users can download Pixelorama from itch.io, GitHub Releases and Scoop. It should run on all new Windows versions from Windows 7 and on. There are three available versions, 64-bit portable, 32-bit portable and a 64-bit installer. See this page to find out whether your system is 64-bit or 32-bit.  ","version":"Next","tagName":"h2"},{"title":"Scoop​","type":1,"pageTitle":"Installation","url":"/Pixelorama-Docs/user_manual/installation#scoop","content":" You can get Pixelorama with Scoop, by pasting these lines in the command prompt.  scoop bucket add extras  scoop install pixelorama  ","version":"Next","tagName":"h3"},{"title":"Linux​","type":1,"pageTitle":"Installation","url":"/Pixelorama-Docs/user_manual/installation#linux","content":" Linux users can download Pixelorama from itch.io, GitHub Releases, Flathub and the Snap Store. There are four available versions, x86 64-bit (x86_64), x86 32-bit (x86_32), ARM 64-bit and ARM 32-bit. Most likely you will need to use the x86_64 version, but you can see this page to find out your CPU architecture, and whether it's 64-bit or 32-bit.  ","version":"Next","tagName":"h2"},{"title":"Flathub​","type":1,"pageTitle":"Installation","url":"/Pixelorama-Docs/user_manual/installation#flathub","content":" You can find Pixelorama for free on Flathub. If you have Flatpak installed, follow the instructions on that page to learn how to install and run the software.  ","version":"Next","tagName":"h3"},{"title":"Snap​","type":1,"pageTitle":"Installation","url":"/Pixelorama-Docs/user_manual/installation#snap","content":" Pixelorama is available as a Snap. If you have Snap installed, run sudo snap install pixelorama on your Terminal to install the software.  ","version":"Next","tagName":"h3"},{"title":"macOS​","type":1,"pageTitle":"Installation","url":"/Pixelorama-Docs/user_manual/installation#macos","content":" macOS users can download Pixelorama from itch.io and GitHub Releases, as shown above. If you encounter any issues with macOS saying that the application is damaged, see this troubleshooting page.  ","version":"Next","tagName":"h2"},{"title":"Early Access - \"Nightly\" Versions​","type":1,"pageTitle":"Installation","url":"/Pixelorama-Docs/user_manual/installation#early-access---nightly-versions","content":" If you want to try the latest unstable builds of Pixelorama, you can find them here, available for Windows 64-bit, Linux 64-bit, as well as macOS. There is also an early-access Web version available here.  Keep in mind that these builds are very unstable and are not recommended for production. ","version":"Next","tagName":"h2"},{"title":"Drawing","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/user_manual/drawing","content":"","keywords":"","version":"Next"},{"title":"Drawing Tools​","type":1,"pageTitle":"Drawing","url":"/Pixelorama-Docs/user_manual/drawing#drawing-tools","content":" You can use one of the available drawing tools in Pixelorama to bring your heart's content to life.  Name\tDescription\tDefault ShortcutPencil\tDraw individual pixels on mouse position.\tL: P, R: Alt + P Bucket\tFill a same-color area or all of the pixels of the same color with a new color.\tL: B, R: Alt + B Line Tool\tCreate a straight line.\tL: L, R: Alt + L Rectangle Tool\tCreate a rectangle.\tL: S, R: Alt + S Ellipse Tool\tCreate an ellipse.\tL: C, R: Alt + C  Tools that are not used directly for drawing but are very helpful for your drawing process:  Name\tDescription\tDefault ShortcutColor Picker\tGet the color of the pixel on mouse position.\tL: O, R: Alt + O Eraser\tErase individual pixels on mouse position.\tL: E, R: Alt + E Shading\tSee this page for a detailed explanation.\tL: U, R: Alt + U  ","version":"Next","tagName":"h2"},{"title":"Pencil and Eraser​","type":1,"pageTitle":"Drawing","url":"/Pixelorama-Docs/user_manual/drawing#pencil-and-eraser","content":" The main tools of Pixelorama. Used to draw or erase pixels at an individual pixel level. You can select from multiple brushes and change their size. You can also hold Shift before drawing to create lines between two points, and by also holding Control, you constrain them either by 15 degrees, or always making them be pixel-perfect angles by having the &quot;Pixel Perfect&quot; option enabled.  The eraser erases pixels by simply subtracting their color RGBA value by the given opacity value. If the opacity value is 255 then the color RGBA value becomes (0, 0, 0 ,0), which is equivalent to black that is completely transparent.  ","version":"Next","tagName":"h2"},{"title":"Pencil Tool Options​","type":1,"pageTitle":"Drawing","url":"/Pixelorama-Docs/user_manual/drawing#pencil-tool-options","content":" The Pencil tool also has an &quot;Overwrite Color&quot; tool option. If this is enabled, the color of the drawn pixels will always become the same color as the selected one. Otherwise, if the colors are transparent, their alpha values will blend. For example, if the color of the drawn pixels have are 30% transparent and your currently selected color is 25% transparent, the resulting transparency will be 55%. While if the overwrite color option is on, the resulting transparency will always be 25%.  The &quot;Fill inside&quot; option fills the entire area with the selected color between the first mouse-clicked position and the last, after the mouse button gets released.  ","version":"Next","tagName":"h3"},{"title":"Pixel Perfect​","type":1,"pageTitle":"Drawing","url":"/Pixelorama-Docs/user_manual/drawing#pixel-perfect","content":" The Pencil and Eraser (and Shading!) tools have an option called &quot;Pixel Perfect&quot;. This essentially creates &quot;pixel perfect&quot; lines for you by automatically removing the middle pixel of L-shapes. In other words, it removes extra adjacent pixels often referred to as &quot;doubles&quot; in order to create lines that are one-pixel thick.    Not pixel-perfect line on the left, compared to a pixel perfect line on the right.​  ","version":"Next","tagName":"h3"},{"title":"Bucket​","type":1,"pageTitle":"Drawing","url":"/Pixelorama-Docs/user_manual/drawing#bucket","content":" The bucket tool is a quick way to paint large sections of the image. You can select one of two fill areas. &quot;Same color area&quot; will fill the area around the mouse click position that is the same color as the pixel on mouse position with the selected color, using a flood fill algorithm. &quot;Same color pixels&quot; will change all of the pixels of the selected cels of the same color as the one on mouse position with the selected color.  You can also choose to fill with patterns instead of a color.  ","version":"Next","tagName":"h2"},{"title":"Shape tools​","type":1,"pageTitle":"Drawing","url":"/Pixelorama-Docs/user_manual/drawing#shape-tools","content":" The shape tools include the line tool, rectangle tool and ellipse tool. All of them are very straightforward to use; you click on where you want to place your shape, hold your mouse button and finally release it on where you want your shape to end. You can also change the shape's thickness, and for the rectangle and ellipse tools, you can choose whether to create hollow or filled with color shapes.  Similar to the selection tools, you can use keyboard shortcuts to modify how the shapes are being created.  Mouse click + Shift = Create a 1:1 (square/circle) shape. For the line tool, Shift will restrain the angle to be pixel perfect, similar to how Control and Shift do for the Pencil tool.Mouse click + Control = Create a shape that expands from the center.Mouse click + Alt = Displaces the origin of the shape.  ","version":"Next","tagName":"h2"},{"title":"Color Picker​","type":1,"pageTitle":"Drawing","url":"/Pixelorama-Docs/user_manual/drawing#color-picker","content":" This one is fairly simple to comprehend. While not a drawing tool itself, the color picker tool is used for getting a sample of an existing color on the canvas with the purpose of replicating it, depending on which pixel the selection is done at.  Now, there's only one category available as an option for the time being, called &quot;Pick for:&quot;. This means that the sample taken will replace one of the colors, either the Left Color or Right Color. Choosing Left Color replaces the left selected color, while right replaces the right selected color.  Quick access You can quickly access the color picker without changing tools by simply holding Alt and Left/Right Click the desired color to assign it to Left or Right tools respectively.  Quick access Another quick and helpful way to use the color picker is having it mapped to your right mouse button and having the Left Color option selected while having a drawing tool mapped to your left mouse button. The color picker can complement the drawing tool by selecting the color you next desire to paint with, making it an immediate way of switching between hues.  ","version":"Next","tagName":"h2"},{"title":"Mirroring​","type":1,"pageTitle":"Drawing","url":"/Pixelorama-Docs/user_manual/drawing#mirroring","content":" All drawing tools can work with symmetry. Symmetry in Pixelorama is either horizontal, vertical or both at the same time. It can be enabled from the tool options. If, for example, horizontal symmetry is enabled, whatever you draw will get mirrored, meaning it will also get drawn on the other horizontal side, having the same distance from the symmetry line as your original drawing. So if you draw a pixel two pixels from the left of the vertical symmetry line and horizontal symmetry is enabled, then the pixel two pixels from the right of the symmetry line and on the same vertical position will also get drawn. The same holds true when vertical symmetry is enabled.  If you have both horizontal and vertical mirroring enabled, then the drawn pixels will get repeated four times. ","version":"Next","tagName":"h2"},{"title":"Image effects","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/user_manual/image_effects","content":"","keywords":"","version":"Next"},{"title":"List of image effects​","type":1,"pageTitle":"Image effects","url":"/Pixelorama-Docs/user_manual/image_effects#list-of-image-effects","content":" Name\tDescriptionOffset\tMoves the pixels of the image to a new position. The moved pixels can optionally be wrapped around when they go out of bounds. For example, if a pixel leaves the canvas from the right, it re-appears on the left side. Mirror\tMirrors the content of the image horizontally, vertically or both. Rotate\tRotates the content of the image. Can change the angle, the pivot point, as well as the algorithm. There are seven rotation algorithms to choose from: Rotxel with Smear, cleanEdge, OmniScale, Nearest Neighbor (Shader), Nearest Neighbor, Rotxel and &quot;Upscale, Rotate and Downscale&quot;. The first four are shader-based, meaning that they use the GPU, while the rest use the CPU. The algorithms that use the GPU tend to be faster. Rotxel with Smear can also create a smearing effect. Invert colors\tInverts the colors of the image. Can choose whether this affects the red, blue, green or alpha channels, or multiple at once. Desaturation\tDesaturates the colors of the image, turning them to grayscale. Can choose whether this affects the red, blue, green or alpha channels, or multiple at once. Adjust Hue/Saturation/Value\tAdjusts the hue, saturation and the value of the image's colors. Adjust Brightness/Contrast\tAdjusts the brightness, contrast, and even the saturation, RGB values and tint color of the image's colors. Color Curves\tAdjusts the RGB, Red, Green, Blue, Alpha, Hue, Saturation and Value channels of the image using curves. Palettize\tLimits the number of colors of the image to the colors of the currently active palette. Each color is being mapped to the nearest color in the palette. Posterize\tLimits the number of colors of the image to the posterization level. Can also set an optional dither intensity. Gradient map\tConverts the colors of the image into a gradient, based on their lightness. Darker colors are mapped to colors on the left side of the gradient, and brighter colors are mapped to colors on the right side of the gradient. Outline\tGenerates an outline, with a given thickness, color and pattern. The outline is being generated outside the pixels that have transparent pixels are neighbors. If &quot;place inside image&quot; is toggled on, the outline is being drawn on these pixels themselves, rather than outside them. Drop shadow\tCreates a shadow of the image's content at a given offset, with a given color. Gradient\tGenerates a gradient. Its colors can be modified from the gradient edit, by clicking on the colored area to add new color steps. Clicking on the color steps with the left mouse allows you to change the color of that step, and right clicking on a step, removes it. Gradients can either be linear or radial, and they can optionally be dithered and/or repeated. You can also generate step gradients by changing the interpolation type to constant. Pixelize\tPixelates the image by combining its pixels into larger squares, containing their average color. Gaussian Blur\tBlurs the image. Users can choose the blur type, amount, radius and direction.  ","version":"Next","tagName":"h2"},{"title":"Loading custom effects​","type":1,"pageTitle":"Image effects","url":"/Pixelorama-Docs/user_manual/image_effects#loading-custom-effects","content":" It is possible to load Godot 4 canvas_item shaders as custom effects in Pixelorama. You can make a shader yourself either by coding it yourself in the Godot Shading Language, or by using Godot's editor to make a Visual Shader. Alternatively, you can find ready to use shaders made by other people online. One of the best places to look for Godot shaders is https://godotshaders.com/shader-type/canvas_item/.  To load a shader, you can drag and drop the shader file from your file editor into Pixelorama. The file extension of code shaders is .gdshader, and of visual shaders is .tres. Then, you can find the effect under the Effects menu, under the &quot;Loaded&quot; subcategory. If you want to use it as a layer effect you can find it by pressing the &quot;FX&quot; button in the layer area of the timeline, then click on &quot;Add Effect&quot; in the dialog that appeared, and find your effect under the &quot;Loaded&quot; subcategory.  If your shader is using the TIME variable, it will not work well when loaded in Pixelorama. Instead, you can add a uniform named PXO_time (by adding uniform float PXO_time; as a line in the uniform area of your shader code), and replace all instances of TIME with PXO_time. PXO_time is a special uniform that measures the time in seconds passed every time a frame plays. For example, if your project runs at 5 frames per second, PXO_time will be equal to 0.2 (1 frame divided by 5 FPS is equal to 0.2 seconds, which is the time it takes for a single frame to play) when the second frame plays, if it has no custom delay. On the third frame it would be equal to 0.4, and so on. On the first frame, PXO_time is always equal to 0. PXO_time is also affected by the individual delay of each frame. By default, frames have no individual delay.  If you want to access the current frame index in your shader, you can use a uniform integer named PXO_frame_index. Similarly, you can use a uniform named PXO_layer_index to access the current layer index.  In the future, we plan to create a custom effect graph which will let users create effects directly within Pixelorama itself, and it will look and function similarly to Godot's Visual Shader editor.  ","version":"Next","tagName":"h2"},{"title":"Animate image effects​","type":1,"pageTitle":"Image effects","url":"/Pixelorama-Docs/user_manual/image_effects#animate-image-effects","content":" Some of these image effects can be animated. To animate an image effect, first create as many frames as you want the animation to last for, and select them. Then, open the image effect dialog you desire, and click on the small play icon on the top right side of the dialog. A new dialog will appear, containing all of the animatable properties. Select the property you wish to animate, toggle &quot;Animate&quot; on, and put the initial and final values, as well as the ease type and interpolation. Once you're done, click on &quot;OK&quot; on the image effect dialog, and the image effect will be applied to all of the selected frames, with the animatable properties you chose being automatically interpolated based on the position of each frame. This method can be used to easily make something move, rotate, etc, without having to edit each frame manually.  Affect active selection By default, image effects will affect only the selected area of the cel(s). If there is no active selection, the entire cel(s) will be affected. If you have an active selection but want to affect the entire image, you can toggle off the &quot;Only affect selection&quot; checkbox in the dialog of the image effect you wish to apply.  Affecting multiple cels at once By default, image effects will apply in all of the currently selected cels. It is also possible to make them apply to the entire selected frame, to all frames of the project, and to all projects as well, by selecting one of these options from the option button found next to the &quot;Only affect selection&quot; checkbox, in the dialog of the image effect you wish to apply. ","version":"Next","tagName":"h2"},{"title":"Selecting","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/user_manual/selecting","content":"","keywords":"","version":"Next"},{"title":"Selection Tools​","type":1,"pageTitle":"Selecting","url":"/Pixelorama-Docs/user_manual/selecting#selection-tools","content":" You can use one of the available selection tools in Pixelorama. Each tool selects things slightly differently.  Name\tDescription\tDefault ShortcutRectangular Selection\tCreate a rectangular selection.\tL: R, R: Alt + R Elliptical Selection\tCreate an elliptical selection.\tL: Y, R: Alt + Y Polygonal Selection\tCreate a polygonal selection. Click where you want each point of the polygon to be. Double click to end your polygon and finalize your selection area.\tL: K, R: Alt + K Select By Color\tSelects all parts of the cel that share the same color.\tL: W, R: Alt + W Magic Wand\tSelects the neighboring same-color area of the pixel the cursor was in on mouse button press.\tL: Q, R: Alt + Q Lasso / Free Select Tool\tSelects a rough outline of an area.\tL: F, R: Alt + F  Similar to the shape drawing tools, you can use keyboard shortcuts to modify how the rectangular and elliptical selections are being created.  Mouse click + Shift = Create a 1:1 (square/circle) selection.Mouse click + Control = Create a selection that expands from the center.Mouse click + Alt = Displaces the origin of the selection.  You can also easily change the selection's position and size from the tool options if you have a selection tool pressed. Keep in mind that if there is an active transformation, the content inside the selected parts will be affected as well. Otherwise, these options only affect the selection itself and not its content.  ","version":"Next","tagName":"h2"},{"title":"Modifying Selections​","type":1,"pageTitle":"Selecting","url":"/Pixelorama-Docs/user_manual/selecting#modifying-selections","content":" The selection tools also give you the ability to modify the already existing selection, by either adding to it, removing from it or creating intersections. By default, the selection tools replace the already existing selection with a new one. Keep in mind that you have to press the keyboard modifiers first before the mouse button is pressed.  Shift + Mouse click = Add to selection.Control + Mouse click = Subtract from the selection.Shift + Ctrl + Mouse click = Create selection intersection.  ","version":"Next","tagName":"h2"},{"title":"Selecting All​","type":1,"pageTitle":"Selecting","url":"/Pixelorama-Docs/user_manual/selecting#selecting-all","content":" You can easily select the entire canvas by either pressing Control + A, or by going to the Select menu and pressing All.  ","version":"Next","tagName":"h3"},{"title":"Clearing Selection​","type":1,"pageTitle":"Selecting","url":"/Pixelorama-Docs/user_manual/selecting#clearing-selection","content":" If you want to delete the entire selection, the easiest way is to deselect everything. You can do that by either pressing Control + D, or by going to the Select menu and pressing Clear. If you have the rectangular selection, elliptical selection, magic wand or lasso tools selected, clicking anywhere outside the canvas also clears the selection.  ","version":"Next","tagName":"h3"},{"title":"Inverting Selection​","type":1,"pageTitle":"Selecting","url":"/Pixelorama-Docs/user_manual/selecting#inverting-selection","content":" Inverting the selection means that all of the currently selected pixels will get deselected, while all of the unselected pixels will get selected. You can do this by either pressing Control + I, or going to the Select menu and pressing Invert. If you have everything selected, inverting will clear the selection. Likewise, if you have nothing selected, inverting will select everything.  ","version":"Next","tagName":"h3"},{"title":"Duplicating​","type":1,"pageTitle":"Selecting","url":"/Pixelorama-Docs/user_manual/selecting#duplicating","content":" If you don't have an active transformation, holding Control + Alt + Mouse click will duplicate whatever was below it and place it in active transformation.  Duplicating Quickly! During active transformation Control + Alt + Mouse click will not only apply transformation but will also retain its content, which you can use again. Handy when duplicating something multiple times.  ","version":"Next","tagName":"h2"},{"title":"Copy, Paste, Cut and Delete​","type":1,"pageTitle":"Selecting","url":"/Pixelorama-Docs/user_manual/selecting#copy-paste-cut-and-delete","content":" If you have an active selection, you can copy its contents by pressing Control + C. Then, you can paste it whenever you like, either on the same cel, on another cel or even a completely different project with Control + V. Pasting will create a new transformation which will be created at the same position as the original selection was when it was copied, but you will easily be able to move it to where you want. Keep in mind that copy/paste does not work at an Operating System level. Meaning, you won't be able to copy/paste image data between different applications on your device.  You can also easily delete the selected content with the Delete key. You can also cut with Control + X. Cut basically copies the selected content and then immediately deletes it.  Keep in mind that all of these operations only affect the currently selected cel and not the entire layer as of right now. You can also use the Edit menu to find these options instead of using keyboard shortcuts.  ","version":"Next","tagName":"h2"},{"title":"Selection Preferences​","type":1,"pageTitle":"Selecting","url":"/Pixelorama-Docs/user_manual/selecting#selection-preferences","content":" Under Edit -&gt; Preferences -&gt; Selection, you will find options to change the colors of the marching ants effect, as well as toggle its animation on or off. ","version":"Next","tagName":"h2"},{"title":"Palettes","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/user_manual/palettes","content":"","keywords":"","version":"Next"},{"title":"Palettes panel​","type":1,"pageTitle":"Palettes","url":"/Pixelorama-Docs/user_manual/palettes#palettes-panel","content":"   The top of the panel consists of tools (used to edit colors of the palette), Palettes selector, Edit palette button and Add new palette button.  The main section is the Palette grid, displaying all colors present in the currently selected palette.  ","version":"Next","tagName":"h2"},{"title":"Creating a new palette​","type":1,"pageTitle":"Palettes","url":"/Pixelorama-Docs/user_manual/palettes#creating-new-palette","content":"   A new palette can be created by clicking Add new palette button.  Preset​  You can select one of the presets to initialize a new palette with colors.  Preset\tDescriptionEmpty\tEmpty palette with no colors. From Current Palette\tPalette will be created with colors copied from the currently selected palette. From Current Sprite\tColors will be imported from the currently opened image. From Current Selection\tColors will be imported from the current selection.  Name​  The name of the palette is also used as a palette file name.  Comment​  The palette's description. Default Pixelorama palettes use this field to credit palette authors.  Width and Height​  Palettes have set width and height (can be resized later) which define their grid size. Allowed values are from 1 to 64.  Create colors with alpha component​  If this option is not toggled on, colors will be imported without alpha channel and transparency is ignored.  Get colors from​  You can limit colors import to just some or all cels (as seen in the animation timeline).  Option\tDescriptionCurrent frame\tColors imported from currently selected frame and all of its layers. Selected cels\tColors imported only from selected cels. All frames\tColors imported from all frames and their layers.  ","version":"Next","tagName":"h3"},{"title":"Editing palette metadata​","type":1,"pageTitle":"Palettes","url":"/Pixelorama-Docs/user_manual/palettes#editing-palette-metadata","content":"   Currently, selected palette metadata can be edited with Edit palette button.  The majority of properties are identical to create a new palette dialog.  palette resizing If the palette size is reduced positions of all colors will be reset to the beginning of the palette. If some colors don't fit in the new size they will be removed!  Name​  If the palette name is changed the file name will also be changed accordingly.  Path​  Displays where exactly in the file system the palette file is located.  Delete button​  Permanently removes the palette from the file system.  ","version":"Next","tagName":"h3"},{"title":"Palette grid​","type":1,"pageTitle":"Palettes","url":"/Pixelorama-Docs/user_manual/palettes#palette-grid","content":" Displays all colors present in the palette. Colors in the grid can be interacted with.  Interaction\tDescriptionLeft click\tColor will be left selected and set as the left tool color. Right click\tColor will be right selected and set as the right tool color. Double click\tDouble click on an existing color opens a color picker to change it's color.  palette grid panning If palette size is greater than 8x8 it can be panned in the grid either with sliders or Middle click + Mouse drag.  ","version":"Next","tagName":"h2"},{"title":"Tools​","type":1,"pageTitle":"Palettes","url":"/Pixelorama-Docs/user_manual/palettes#palette-grid-tools","content":" Tools allow you to edit colors in the palette.  Button\tTool\tDescription+\tAdd a new color\tLeft mouse click adds left tool color. Right mouse click adds right tool color. -\tRemove a selected color\tLeft mouse click removes left selected color. Right mouse click removes right selected color. ↓\tPalette sorting options\tA drop-down appears, containing the available sorting options. You can either apply the new color order directly to palette or to a copy of it.  ","version":"Next","tagName":"h3"},{"title":"Colors movement​","type":1,"pageTitle":"Palettes","url":"/Pixelorama-Docs/user_manual/palettes#colors-movement","content":" Colors can be moved and copied around in the palette grid.  Shortcut\tMovement descriptionMouse drag\tColor switches with a color it is dropped on. Shift + Mouse drag\tColor is inserted where dropped. If dropped on another color the original color is moved to the right with every color next to it. Ctrl + Mouse drag\tColor is copied where dropped. If dropped on another color the original color is overwritten.  ","version":"Next","tagName":"h3"},{"title":"Palettes import​","type":1,"pageTitle":"Palettes","url":"/Pixelorama-Docs/user_manual/palettes#palettes-import","content":" To import a palette, either drag and drop a palette file into Pixelorama window or use File &gt; Open dialog.  An imported palette will be converted to Pixelorama palette, stored physically in the Pixelorama data folder and added to the palettes selection in Palettes panel.  The only exception to import behavior is Image palette. Importing an image to Pixelorama will open Import Options dialog in which you can select Import as &gt; New palette to process an image to import a palette.  palette extraction You can import any image as a palette and extract colors from it. Every color from the image will be added to the palette only once. With bigger images, it can take longer time to finish.  ","version":"Next","tagName":"h2"},{"title":"Supported formats​","type":1,"pageTitle":"Palettes","url":"/Pixelorama-Docs/user_manual/palettes#supported-formats","content":" Format\tFile extensionPixelorama palette\t.json GIMP GPL\t.gpl PAL\t.pal Image palette\t.png, .bmp, .hdr, .jpg, .jpeg, .svg, .tga, .webp  file extensions Palette format detection uses file extensions to determine how to parse palette formats. An incorrect extension will result in an import error.  pre-1.0 pixelorama palettes Palettes created in versions of Pixelorama prior to 1.0 cannot be reimported. The save format was changed from .tres to .json, due to security concerns. In order to convert an old palette to a new one, you can export it as an image from version 0.11.4, and import that image to the newest version. ","version":"Next","tagName":"h3"},{"title":"Save and Export","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/user_manual/save_and_export","content":"","keywords":"","version":"Next"},{"title":"Saving​","type":1,"pageTitle":"Save and Export","url":"/Pixelorama-Docs/user_manual/save_and_export#saving","content":"   To save a project, you can go to the File menu and select Save.., or press Control + S, and a window will appear. If you are using a Desktop version, you will be able to choose where you want the file to be saved. If you use the Web version, you will be asked for a file name and the .pxo file will be downloaded by your browser.  By selecting Save... again on a project you have already saved, the file name and path you chose before will still be automatically used, which means that the old file will be replaced with a new one with the changes you have made. If you'd like to save a different file, you have to use the Save as... option, or press Shift + Control + S.  ","version":"Next","tagName":"h2"},{"title":"Exporting​","type":1,"pageTitle":"Save and Export","url":"/Pixelorama-Docs/user_manual/save_and_export#exporting","content":" To export your project, you can go to the File menu and select Export..., or press Control + E, and a window will appear. If you are using a Desktop version, you will be able to choose where you want the file to be saved. If you use the Web version, you will be asked for a file name and the .png, .apng or .gif file(s) will be downloaded by your browser.  Just like with save, you have to use the Export as... option or Shift + Control + E to export to a new directory.  You can choose what you want to export by clicking on one of the tabs on the top of the window.  resize while exporting If you draw on a small canvas, the exported image will have a relatively slow resolution. Some software and websites tend to blur small images, which can make pixel art look bad. To avoid that, you are also given the option to resize on export, with a chosen interpolation method. This is useful when you want to share your art and make it easier for people to preview it. For most cases, sticking with the default Nearest interpolation should be fine.  You can choose which frames you want to save by changing the &quot;Frame&quot; option below the preview. The default setting is to include all frames, but you can set it to only include the currently selected frame, or select specific tags. Similarly, you can select which layers you want to include by changing the &quot;Layers&quot; option. You are also given the option to select the animation direction from either forward, backward or a ping-pong loop.  ","version":"Next","tagName":"h2"},{"title":"Export a sequence of images​","type":1,"pageTitle":"Save and Export","url":"/Pixelorama-Docs/user_manual/save_and_export#export-a-sequence-of-images","content":"   By default, the export window is set to export a sequence of images, one for each frame, either as multiple files, or as a single animated file, if the file format is set to an animated image format, such as .gif or .apng.  If you save your animation as multiple files, then every file will have a number attached to its name. For example, if the name is filename.png, the exported file names will be filename_0001.png, filename_0002.png, filename_0003.png and so on. In the advanced options, you can find options to change the separator character(s) (in the above example, the character is the underscore (_), which is also the default). If these frames also have a frame tag, the name of the tag can be included in the file name as well, by enabling &quot;Include frame tags in the file name&quot;. You can also choose to automatically create a new directory for each frame tag for extra organization, by enabling &quot;Create new folder for each frame tag&quot;. This will place all of the frames of the same tag in a different directory.  Keep in mind that if you are working with a large canvas size and/or multiple frames, the .gif exporting process can be slow. Until we speed up the process, it is recommended to export to .apng and use another tool, such as https://ezgif.com/apng-to-gif, to convert the .apng file to .gif.  ","version":"Next","tagName":"h3"},{"title":"Export a spritesheet​","type":1,"pageTitle":"Save and Export","url":"/Pixelorama-Docs/user_manual/save_and_export#export-a-spritesheet","content":"   You can save the entire animation as a single image containing all of the frames. This is called a spritesheet. You can choose how many rows and columns you want your animation to be split into, in the spritesheet. Spritesheets can also be imported into Pixelorama.    The above project exported as a gif file with Pixelorama​  ","version":"Next","tagName":"h3"},{"title":"Export a video​","type":1,"pageTitle":"Save and Export","url":"/Pixelorama-Docs/user_manual/save_and_export#export-a-video","content":" You can also export to various video formats. The process is similar to exporting a sequence of images, but Pixelorama is not able to export to video by itself. For this, you need FFMPEG. All you have to do is download it if it's not already installed, and then find its executable path and copy it inside Pixelorama, in Edit&gt;Preferences&gt;Startup&gt;FFMPEG. If you have FFMPEG in the PATH environment variable of your Operating System, you can just put &quot;ffmpeg&quot; in the text field in the Preferences, instead of copying the path. Otherwise, make sure to include the entire path to the executable. For example, on Windows, it needs to look something like this: [path_to_ffmpeg]/bin/ffmpeg.exe. ","version":"Next","tagName":"h3"},{"title":"Shading","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/user_manual/shading","content":"","keywords":"","version":"Next"},{"title":"Simple Shading​","type":1,"pageTitle":"Shading","url":"/Pixelorama-Docs/user_manual/shading#simple-shading","content":" This is a fairly straightforward method of shading. You can choose to either lighten or darken the area where you clicked, as well as the shading value. The bigger the number, the more shading will be applied. All it does is simply increase (with lighting) or decrease (with shading) the Value of the pixel's colors, which represents the color's brightness. It essentially just makes the same colors brighter or darker.  ","version":"Next","tagName":"h2"},{"title":"Hue Shifting​","type":1,"pageTitle":"Shading","url":"/Pixelorama-Docs/user_manual/shading#hue-shifting","content":" Hue Shifting is a bit more complex than Simple Shading. Instead of just shifting the Value of the color, we also shift their Hue and Saturation too. When we are brightening the colors, we shift their hue to move towards yellow (the limit is set to roughly 60 Hue), decrease their saturation and increase their value. On the contrary, when we are darkening the colors, their hue shifts towards blue (the limit is set to roughly 240 Hue), their saturation increases and their value decreases. This is all done automatically by the Shading tool, but you can also configure the amount the Hue, Saturation and Value change from the tool options.  Here is a video by Brandon James Greer that explains the concept of hue shifting.    hue shifting limits The hue shifting mode does not always change the hue, saturation and value of the colors exactly as much as the values have been set by the user. For example, a color with a hue of 70 and the shading tool set to hue shifting, lighten and a hue of, let's say, 20, will not result in a color with a hue of 50 (because 70 - 20 = 50), but it will rather stay limited to 60, as this is the hard limit of lighting. Similarly, the hard hue limit of darkening is 240. If you want to exactly change the HSV values of a color, you can use the Adjust Hue/Saturation/Value image effect under the Image menu.  ","version":"Next","tagName":"h2"},{"title":"Color Replace​","type":1,"pageTitle":"Shading","url":"/Pixelorama-Docs/user_manual/shading#color-replace","content":" This mode is pretty much self explanatory. The user selects an array of colors by first selecting a color on the palette and then specifying the number of colors to pick after it through the Colors right slider. When shading, if a color is present in the chosen array of colors, it then gets replaced by the next (or previous) color in the array, depending on your current lighten/darken mode.    Properties of the Color replace shading mode.​ ","version":"Next","tagName":"h2"},{"title":"Shortcut settings","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/user_manual/shortcut_settings","content":"","keywords":"","version":"Next"},{"title":"Adding a shortcut event​","type":1,"pageTitle":"Shortcut settings","url":"/Pixelorama-Docs/user_manual/shortcut_settings#adding-a-shortcut-event","content":" To add new events, find the action you wish to modify, and click on the plus (+) button next to it. A popup menu will appear, allowing you to choose one of the four event types: keyboard, mouse button, gamepad button and gamepad axis. After you select the event type, a new dialog will appear that lets you set the event. For a keyboard event, you can press a key or a key combination, and the input will be listened and set to the event automatically. For the other event types, you have to choose a specific event from a dropdown list.  ","version":"Next","tagName":"h2"},{"title":"Editing a shortcut event​","type":1,"pageTitle":"Shortcut settings","url":"/Pixelorama-Docs/user_manual/shortcut_settings#editing-a-shortcut-event","content":" To edit an event, you can press the pencil button next to it. Similar to adding a new event, a dialog will appear that will allow you to change the event to something else. Note that, as of right now, you cannot change the event type. Meaning, if you have, for example, a mouse event, you cannot change it to a gamepad event. You have to remove that mouse event and add a new one.  ","version":"Next","tagName":"h2"},{"title":"Removing an event​","type":1,"pageTitle":"Shortcut settings","url":"/Pixelorama-Docs/user_manual/shortcut_settings#removing-an-event","content":" Removing an event is straight-forward. Simply click on the X button and that event will be deleted. Clicking the X button on an action will remove all of its events. ","version":"Next","tagName":"h2"},{"title":"The Canvas","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/user_manual/user_interface/canvas","content":"","keywords":"","version":"Next"},{"title":"Navigation​","type":1,"pageTitle":"The Canvas","url":"/Pixelorama-Docs/user_manual/user_interface/canvas#navigation","content":" You can navigate around the canvas in multiple ways.  ","version":"Next","tagName":"h2"},{"title":"Zoom​","type":1,"pageTitle":"The Canvas","url":"/Pixelorama-Docs/user_manual/user_interface/canvas#zoom","content":" To zoom, you can use the mouse wheel. Scroll the wheel up to zoom in, and down to zoom out. You can also use + on your keyboard to zoom in and - to zoom out. You can see the current zoom level of the canvas in the top bar of the user interface.  There is also a dedicated zoom tool, which you can use like any other tool, by pressing either the left or the right mouse button, depending on where you mapped it. The zoom tool can prove useful for users with no mouse, such as graphics tablet or touch screen users. From the tool's options, you can switch it to either zoom in or out, and you can also find two buttons.    The first one is &quot;Fit to frame&quot; which basically centers your canvas and makes it as big as possible without any portion of it not being visible.  The second one is 100% zoom. This basically makes the canvas its exact pixel dimensions based on your screen. For example, if your canvas is 64x64 pixels, pressing this button will make the canvas appear on a 64x64 area of your screen. This gives you an idea of how your art looks at its original dimensions.  ","version":"Next","tagName":"h3"},{"title":"Pan​","type":1,"pageTitle":"The Canvas","url":"/Pixelorama-Docs/user_manual/user_interface/canvas#pan","content":" You can pan by either holding the middle mouse button or Space on your keyboard and simply moving the mouse. You can also use the arrow keys to move around. Like with zoom, there is also a dedicated pan tool.  ","version":"Next","tagName":"h3"},{"title":"Mirror​","type":1,"pageTitle":"The Canvas","url":"/Pixelorama-Docs/user_manual/user_interface/canvas#mirror","content":" You can mirror your view horizontally and non-destructively by going to the View menu and clicking &quot;Mirror View&quot;, or by pressing Shift + M.  ","version":"Next","tagName":"h3"},{"title":"Grid​","type":1,"pageTitle":"The Canvas","url":"/Pixelorama-Docs/user_manual/user_interface/canvas#grid","content":" The grid is an important tool that aids the user in accurately drawing lines. Currently, Pixelorama has two types of grids, rectangular and isometric. The rectangular grid is what you will probably use most of the time, while the isometric grid is great if you are making isometric art, like the one pictured below.    ","version":"Next","tagName":"h2"},{"title":"Editing the Grid​","type":1,"pageTitle":"The Canvas","url":"/Pixelorama-Docs/user_manual/user_interface/canvas#editing-the-grid","content":" The grid's properties can be edited in the Preferences, which is found under the Edit menu, and then selecting &quot;Canvas&quot; on the left side. The option includes the grid type itself (rectangular, isometric or both), the width and height of the rectangular grid, the width and height of the isometric bounds of the cells, the x and y offset of the grid, the grid color and whether to draw over Tile Mode.  To toggle its visibility, you can click on &quot;Show Grid&quot; in the View menu, or by pressing Control + G.  ","version":"Next","tagName":"h3"},{"title":"Pixel Grid​","type":1,"pageTitle":"The Canvas","url":"/Pixelorama-Docs/user_manual/user_interface/canvas#pixel-grid","content":" The Pixel Grid is a rectangular 1x1 grid that appears after a certain zoom level. You can change its color and after which zoom level it appears at the same place as the rest of the grid options.  To toggle its visibility, you can click on &quot;Show Pixel Grid&quot; in the View menu, or by pressing Control + H.  ","version":"Next","tagName":"h3"},{"title":"Tile Mode​","type":1,"pageTitle":"The Canvas","url":"/Pixelorama-Docs/user_manual/user_interface/canvas#tile-mode","content":" If you are working with tiles, it might be useful to preview them in such a way so you can see if they repeat seamlessly. For this reason, you can enable Tile Mode, which repeats the canvas in multiple dimensions around the central area. To enable Tile Mode, you can go to the View menu, hover on Tile Mode and select what you want. &quot;None&quot; will disable Tile Mode, &quot;Tiled in Both Axis&quot; will repeat the canvas horizontally, vertically and diagonally, and the other two options will just repeat it either horizontally or vertically. It is also possible to draw in the tiled area.  ","version":"Next","tagName":"h2"},{"title":"Second Canvas​","type":1,"pageTitle":"The Canvas","url":"/Pixelorama-Docs/user_manual/user_interface/canvas#second-canvas","content":" On the right side of the canvas, there is a grabber. Moving it to the left will reveal a second canvas. The purpose of this is to easily preview your artwork in different positions or zoom levels. As of right now, you cannot draw on it.  ","version":"Next","tagName":"h2"},{"title":"Rulers and Guides​","type":1,"pageTitle":"The Canvas","url":"/Pixelorama-Docs/user_manual/user_interface/canvas#rulers-and-guides","content":" On the top and left sides of the canvas, you can find two rulers. These serve two purposes, the first is to let the user easily and effortlessly measure distances in pixels, and the second is to create guides by clicking on them with the left mouse button and, while it's being held, dragging the cursor to the position you want your guide to be at. Guides are either horizontal or vertical lines that can be used as references to help you properly align stuff on your canvas.  ","version":"Next","tagName":"h2"},{"title":"Editing Guides​","type":1,"pageTitle":"The Canvas","url":"/Pixelorama-Docs/user_manual/user_interface/canvas#editing-guides","content":" To move an already created guide, you can drag the guide by clicking and holding the left mouse button while your cursor is pointing at the guide but it's also outside the canvas boundaries. If it's not, it will simply apply your currently selected tool. If the guide is completely moved outside the canvas area, it will be removed.  You can also change their colors by going to Edit, Preferences, Canvas.  ","version":"Next","tagName":"h3"},{"title":"Toggling Visibility​","type":1,"pageTitle":"The Canvas","url":"/Pixelorama-Docs/user_manual/user_interface/canvas#toggling-visibility","content":" You can also easily hide the rulers and the guides from the View menu. Control + R toggles the visibility of the rulers, and Control + F toggles the visibility of the guides.  ","version":"Next","tagName":"h3"},{"title":"Transparent Background​","type":1,"pageTitle":"The Canvas","url":"/Pixelorama-Docs/user_manual/user_interface/canvas#transparent-background","content":" If you are working with a drawing that has transparent pixels, a checkerboard background will appear there. Its purpose is to simply show that these areas are transparent. The background itself is not part of your drawing. Meaning, it will not be exported along with the final image.  ","version":"Next","tagName":"h2"},{"title":"Editing the transparent background​","type":1,"pageTitle":"The Canvas","url":"/Pixelorama-Docs/user_manual/user_interface/canvas#editing-the-transparent-background","content":" You can edit the checkerboard background by going to the Edit menu, Preferences, and selecting Canvas. The options include the size of the checkers in pixels, the two colors that make up the checkerboard, and whether they follow the canvas movement and zoom level. If both &quot;Follow Canvas Movement&quot; and &quot;Follow Canvas Zoom Level&quot; are toggled on, the checkerboard matches exactly the pixels of the canvas that you draw and will pretty much act as a second grid. ","version":"Next","tagName":"h3"},{"title":"Tilemaps","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/user_manual/tilemaps","content":"","keywords":"","version":"Next"},{"title":"Tileset​","type":1,"pageTitle":"Tilemaps","url":"/Pixelorama-Docs/user_manual/tilemaps#tileset","content":" A tileset is essentially a collection of images of the same size, referred to as tiles. Each tile has an index number (a positive integer starting from 0), and they can be re-used multiple times, even in multiple tilemap layers, if they use the same tileset. Tilesets are created either automatically when creating a tilemap layer, or by importing an image, and choosing to import it as a tileset. When saving a project, the tilesets are being stored inside the .pxo file. To see all of the available tilesets of a project, you can go to the Image menu and select Project Properties. From there, you can duplicate and delete tilesets. Note that you can only delete tilesets if they are not used by a tilemap layer.  ","version":"Next","tagName":"h2"},{"title":"Creating a new tilemap layer​","type":1,"pageTitle":"Tilemaps","url":"/Pixelorama-Docs/user_manual/tilemaps#creating-a-new-tilemap-layer","content":" You can create a new tilemap layer by going to the top left side of the timeline, and clicking on the first button's arrow. That will bring up a menu of all available layer types. From there, choose &quot;Tilemap layer&quot;. A window will appear with an option to choose which tileset the tilemap will use. If you have already created tilesets in this project, you can choose to use those in your new tilemap layer. Otherwise, your only option will be to create a new tileset. When creating a new tileset, you can choose its name and the size and shape of its individual tiles. Note that these cannot be changed later. It is possible, however, to change the tileset that the tilemap layer is using. To do that, you can right click on the tilemap layer in the timeline, select Properties, and choose a different tileset from the dropdown list. Note that this can be destructive if the new tileset has less tiles than the previous one.  Not just rectangles Pixelorama supports rectangular, isometric and hexagonal tiles! Hexagonal tiles support both pointy-top and flat-top orientations. When the tile offset axis is set to horizontal, hexagonal tiles use pointy-top orientation, while if it's set to vertical, they use flat-top orientation.  ","version":"Next","tagName":"h2"},{"title":"Place-only mode​","type":1,"pageTitle":"Tilemaps","url":"/Pixelorama-Docs/user_manual/tilemaps#place-only-mode","content":" While it is not possible to change a tileset's tile size &amp; shape after it has been created, you can enable &quot;Place-only mode&quot; on a tilemap layer from its layer properties, which you can access by right clicking on the layer button in the timeline. Doing so, you can override the tileset's settings, and have a separate tile size and shape that is specific for this tilemap layer. This is useful mostly for creating isometric tilemaps, the tiles of which are larger than the isometric grid size, thus leading to pixels being outside each tile cell. Note that once this mode is enabled, you will not be able to disable it, and it will no longer be possible for you to draw regular pixels, or affect the tileset in any way. As the name of the mode implies, you can only place already existing tiles. However, you can still modify tiles in other tilemap layers that share the same tileset.    ","version":"Next","tagName":"h2"},{"title":"Tiles panel​","type":1,"pageTitle":"Tilemaps","url":"/Pixelorama-Docs/user_manual/tilemaps#tiles-panel","content":" When a tilemap layer is selected, a new panel will appear in the user interface. From there, you can see all of the available tiles of the tileset, as well as some buttons that are related to the available editing modes.  panel not appearing If the tiles panel does immediately become visible when switching to a tilemap layer, it has probably spawned as a tab next to the first available panel of the user interface, depending on your layout. If you are using a default layout, you can reset it by going to Window, Layouts, Reset. Otherwise, you will have to locate it by yourself and move it to the desired location manually.  ","version":"Next","tagName":"h2"},{"title":"Editing modes​","type":1,"pageTitle":"Tilemaps","url":"/Pixelorama-Docs/user_manual/tilemaps#editing-modes","content":" Pixelorama offers two editing modes when using tilemap layers; Draw pixels and draw tiles. You can switch between them by clicking on the first button on the top left of the tiles panel, or by pressing Shift + `.  ","version":"Next","tagName":"h2"},{"title":"Draw pixels​","type":1,"pageTitle":"Tilemaps","url":"/Pixelorama-Docs/user_manual/tilemaps#draw-pixels","content":" Draw pixels is the default mode, and is used to add/modify the tiles themselves, by drawing as you would on normal pixel layers. The draw pixels mode has three sub-modes, which can be toggled by the three buttons next to the draw tiles button, that are visible when draw pixels mode is active. Note that this mode is not available for tilemap layers using place-only mode.  Mode name\tDescription\tDefault ShortcutManual\tThis mode modifies individual tiles, and immediately applies the change to all other instances of the modified tile(s) in the tilemap. It does not affect the order of tiles in the tileset.\tShift + 1 Auto\tThe default mode. This mode creates new tiles in the tileset when drawing, if the modified tiles do not already exist in the tileset. If they do, the tiles get re-used. Tiles that are no longer used anywhere in the tilemap get erased from the tileset.\tShift + 2 Stack\tThis mode creates new tiles in the tileset every time a tile gets modified, without changing any of the already existing tiles.\tShift + 3  ","version":"Next","tagName":"h3"},{"title":"Draw tiles​","type":1,"pageTitle":"Tilemaps","url":"/Pixelorama-Docs/user_manual/tilemaps#draw-tiles","content":" The draw tiles mode is used to place tiles directly from the tileset to the tilemap, without modifying the content of the tileset. To draw tiles, you can select a tile from the panel, and then use the pencil tool to place it on the canvas. Tiles can only be placed in grid cells, and not between them. You can also quickly rotate and flip the tiles by clicking on the arrow buttons next to the draw tiles button, or by pressing Shift + Z to rotate left, Shift + X to rotate right, Shift + C to flip horizontally and Shift + V to flip vertically.  random tiles You can select multiple tiles from the Tiles panel, either by holding Shift or Control while clicking on them, just like you can with the timeline layer/frame/cel buttons. If you have multiple tiles selected, Pixelorama will randomly choose one of the selected tiles to place when drawing. If you want to change the probability of individual tiles, you can right click on a tile, select Properties, and change the probability slider. By default, all tiles have their probability set to 1, meaning that all of them have an equal chance to appear when drawing.  When this mode is used, the behavior of most tools changes.  Tools\tBehavior in draw tiles modePencil, bucket, line, curve and shape\tPlace tiles Eraser\tRemove tiles Color picker\tQuickly select a tile from the tilemap Move\tMoves the tilemap's offset along with its tiles Selection\tSelect entire grid cells. Resizing a selection does not resize the pixels. Instead, it resizes the tile indices of the grid cells, placing more tiles if the selection is enlarged, or removing if it gets smaller. Note that this only works with rectangular tiles, and not isometric or hexagonal at the moment.   ","version":"Next","tagName":"h3"},{"title":"Transforming","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/user_manual/transforming","content":"","keywords":"","version":"Next"},{"title":"Move​","type":1,"pageTitle":"Transforming","url":"/Pixelorama-Docs/user_manual/transforming#move","content":" To move pixels around in the canvas, you can use the Move tool. It works by simply holding the mapped mouse button and dragging the cursor to where you want to move the content. If there is no active selection, it will move the entire content of the active cels. If there is a selection, it will start a selection transformation, and it will move both the selection itself and its content. To move a selection, it is also possible to use a selection tool and click inside the selected area and, while the mapped mouse button is being held, drag the cursor, just like you do with the Move tool. There are some keyboard shortcuts that can help you with movement. The order of the key press and mouse button press matters for the selection tools.  Mouse movement + Shift = Moves &amp; snaps selection to an axis.Mouse movement + Control = Moves &amp; snaps selection to the rectangular grid.Alt + Mouse movement = Moves selection without content. This only works for the selection tools and not the Move tool.Control + Alt + mouse movement = Copies selection and moves it without cutting it from the original position. This is basically a quick way to copy and move stuff around without Control + C and Control + V. This only works for the selection tools and not the Move tool.  If you have a selection tool active, you can also use the arrow keys to move the selection and contents. Pressing Alt only moves the selection without content, and holding Control moves the selection by the size of the rectangular grid tiles. You can also manually change the position of the selection from the tool options. If there is an active transformation, the content will be affected as well, otherwise, it will only move the selection itself without its content.  ","version":"Next","tagName":"h2"},{"title":"Scale​","type":1,"pageTitle":"Transforming","url":"/Pixelorama-Docs/user_manual/transforming#scale","content":" To resize your image, you can go to the Image menu and select Scale Image. There you can choose the new size of your entire project. You can also just expand the canvas without affecting the content that is inside by going to the Image menu and pressing Resize Canvas. Furthermore, you can go to Image -&gt; Crop Image, which will remove all of the transparent pixels that surround your drawing, by shrinking the size of the image. Of course, all of these options will affect all of the cels of the project.  If you want you resize only selected part(s) of your artwork, you can create a selection and use one of the eight gizmos that appear on each side of the selection borders. To use them, you can simply left-click on them, hold, then move your cursor. Moving it outwards will expand the size, while moving it inwards will shrink it. Using gizmos will start a selection transformation. Like with movement, there are some keyboard shortcuts you can use to give you more control over the transformation.  Mouse click + Shift = Keeps the original aspect ratio of the selection.Mouse click + Control = Expands from the center.Alt + Mouse click = Only affects the selection and not the content.  You can also manually change the size of the selection from the tool options. If there is an active transformation, the content will be affected as well, otherwise, it will only scale the selection itself without its content.  ","version":"Next","tagName":"h2"},{"title":"Rotate​","type":1,"pageTitle":"Transforming","url":"/Pixelorama-Docs/user_manual/transforming#rotate","content":" To rotate your image, you can go to the Image menu and select Rotate Image. There, you can choose one of the three rotation algorithms. You can experiment with every one of them to see what works best for you. You are also given the option to only affect the selected part of the image or the entire area of the active cels. In the future, there will most likely be gizmos that rotate the selection directly, just like there are for scaling.  ","version":"Next","tagName":"h2"},{"title":"Having An Active Transformation​","type":1,"pageTitle":"Transforming","url":"/Pixelorama-Docs/user_manual/transforming#having-an-active-transformation","content":" When moving or scaling a selection with its contents, the selected pixels will suddenly become transparent. This indicates that a selection transformation has started. This means that your changes haven't yet been applied to the image. When there is an active transformation, moving and scaling will only affect the transformed content and nothing else, until it is applied.  ","version":"Next","tagName":"h2"},{"title":"Applying A Transformation​","type":1,"pageTitle":"Transforming","url":"/Pixelorama-Docs/user_manual/transforming#applying-a-transformation","content":" To apply your changes, you can either press Enter, or by doing any other action, such as drawing, applying an image effect, selecting another cel, adding a new frame or layer, etc. Doing any of these will automatically apply your changes.  ","version":"Next","tagName":"h3"},{"title":"Canceling A Transformation​","type":1,"pageTitle":"Transforming","url":"/Pixelorama-Docs/user_manual/transforming#canceling-a-transformation","content":" To cancel a transformation, you can either press Escape or undo. You will not be able to redo your actions if you decide to cancel. ","version":"Next","tagName":"h3"},{"title":"Tools","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/user_manual/tools","content":"","keywords":"","version":"Next"},{"title":"Left and right mouse buttons​","type":1,"pageTitle":"Tools","url":"/Pixelorama-Docs/user_manual/tools#left-and-right-mouse-buttons","content":" tools for left and right mouse buttons Left-clicking a tool will assign this tool to your left mouse button and right-clicking it will assign the tool you clicked to your right mouse button. If you left-click on the canvas, your left tool will be activated, and if you right-click on the canvas, your right tool will be activated.  In Pixelorama, you are given the ability to map a different tool to each mouse button, left and right. This essentially means that you can use a different tool with your left mouse button, and a different tool with your right mouse button. The two mouse buttons can be used independently of one another. In the toolbar, you will see one of the tool buttons having a half background on the left side of the button as blue. This represents the left mouse button, and it means that this specific tool has been mapped to the left mouse button. Similarly, the tool button with that has has a half background on the right side as orange is mapped to the right mouse button. If a tool button has both a blue and orange background, then this means that this tool has been mapped to both left and right mouse buttons.  So, to sum up, blue represents the left mouse button and orange represents the right mouse button. To map a tool to your left mouse button you can left-click the button of the tool you want to map in the toolbar, and to map a tool to your right mouse button you can right-click the tool button.  When you are on your canvas, if you left-click, the tool that you left-clicked on the toolbar will be used and if you right-click, the tool that you right-clicked will be used.    A screenshot example of the Pencil tool having a blue half background, which is mapped to the left mouse button and the Eraser tool having an orange half background, which is mapped to the right mouse button.​  ","version":"Next","tagName":"h2"},{"title":"The tools​","type":1,"pageTitle":"Tools","url":"/Pixelorama-Docs/user_manual/tools#the-tools","content":" These are all of the available tools in Pixelorama in order, from top to bottom.  ","version":"Next","tagName":"h2"},{"title":"The selection tools​","type":1,"pageTitle":"Tools","url":"/Pixelorama-Docs/user_manual/tools#the-selection-tools","content":" Name\tDescription\tDefault ShortcutRectangular Selection\tCreate a rectangular selection.\tL: R, R: Alt + R Elliptical Selection\tCreate an elliptical selection.\tL: Y, R: Alt + Y Polygonal Selection\tCreate a polygonal selection. Click where you want each point of the polygon to be. Double click to end your polygon and finalize your selection area.\tL: K, R: Alt + K Select By Color\tSelects all parts of the cel that share the same color.\tL: W, R: Alt + W Magic Wand\tSelects the neighboring same-color area of the pixel the cursor was in on mouse button press.\tL: Q, R: Alt + Q Lasso / Free Select Tool\tSelects a rough outline of an area.\tL: F, R: Alt + F Select By Drawing\tSelect individual pixels manually. Behaves similar to the Pencil tool, but selects instead of drawing.\tI: F, R: Alt + I  ","version":"Next","tagName":"h3"},{"title":"Utility tools​","type":1,"pageTitle":"Tools","url":"/Pixelorama-Docs/user_manual/tools#utility-tools","content":" Name\tDescription\tDefault ShortcutMove\tMoves the content of the active cel. A transformation tool, see transforming.\tL: M, R: Alt + M Crop\tChanges the size of the canvas.\tL: V, R: Alt + V Text\tAdds custom text to the image.\tL: T, R: Alt + T 3D Shape Edit\tOnly enabled when the actively selected layer is a 3D layer. Used to select 3D shapes in the canvas to edit them.\t  ","version":"Next","tagName":"h3"},{"title":"Canvas navigation tools​","type":1,"pageTitle":"Tools","url":"/Pixelorama-Docs/user_manual/tools#canvas-navigation-tools","content":" Name\tDescription\tDefault ShortcutZoom\tAllows the user to change the zoom level of the canvas.\tL: Z, R: Alt + Z Pan\tAllows the user to move around the canvas.\tL: A, R: Alt + A  ","version":"Next","tagName":"h3"},{"title":"Drawing and drawing-assisting tools​","type":1,"pageTitle":"Tools","url":"/Pixelorama-Docs/user_manual/tools#drawing-and-drawing-assisting-tools","content":" Name\tDescription\tDefault ShortcutColor Picker\tGet the color of the pixel on mouse position.\tL: O, R: Alt + O Pencil\tDraw individual pixels on mouse position.\tL: P, R: Alt + P Eraser\tErase individual pixels on mouse position.\tL: E, R: Alt + E Bucket\tFill a same-color area or all of the pixels of the same color with a new color.\tL: B, R: Alt + B Shading\tSee this page for a detailed explanation.\tL: U, R: Alt + U Line Tool\tCreate a straight line.\tL: L, R: Alt + L Curve Tool\tCreates a Bézier curve. Click where you want each point of the curve to be, and hold and drag to modify the curve. Double-click to finish drawing the curve. Pressing Control removes the last added point. Can also be used as a polygon tool, if &quot;fill shape&quot; is enabled.\tL: J, R: Alt + J Rectangle Tool\tCreate a rectangle.\tL: S, R: Alt + S Ellipse Tool\tCreate an ellipse.\tL: C, R: Alt + C  Hovering your mouse over a tool button will reveal a small display that can give you more information about the tool.    ","version":"Next","tagName":"h3"},{"title":"Tool options​","type":1,"pageTitle":"Tools","url":"/Pixelorama-Docs/user_manual/tools#tool-options","content":" Almost every tool has certain properties that the user can tweak, such as brush type and size, different modes, color or mirroring. The tool options are located in the right side of the application window and they are separated in left tool and right tool settings. These, of course, correspond to the two tools you have mapped at your two mouse buttons. The two colors are also mapped to different mouse buttons. The left one is for the left mouse button tool, and the right one is for the right mouse button tool.  Change mode quickly! Most of the tools have some binary property that has to be changed often. Holding Ctrl will allow you to quickly alternate between the properties for a given tool as follows:  Tool\tAlternating PropertyZoom\tZoom in / Zoom out Color picker\tPick for left color / Pick for right Pencil\tOverwrite color on / off Bucket\tFill same color area / Fill same color pixels Shading\tLighten / Darken option  The tool options change every time the user changes the available tool, and most tools have their own unique options.    An example of tool options, for the Pencil and Eraser tool.​ ","version":"Next","tagName":"h2"},{"title":"The Timeline","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/user_manual/user_interface/timeline","content":"","keywords":"","version":"Next"},{"title":"Animation​","type":1,"pageTitle":"The Timeline","url":"/Pixelorama-Docs/user_manual/user_interface/timeline#animation","content":" To preview your animation, you can click on the Play button (or press F5) located on the top right side of the timeline. The button on the left (mapped to F4) is used to preview the animation backward.  ","version":"Next","tagName":"h2"},{"title":"FPS​","type":1,"pageTitle":"The Timeline","url":"/Pixelorama-Docs/user_manual/user_interface/timeline#fps","content":" On the top and far right side of the timeline, you will see a number, which has the default value of 6. This is the FPS, which stands for Frames Per Second. To put it simply, this is the speed of the animation and it determines how many frames are being shown for every second. Having a value of 6 FPS, for example, will display 6 frames every second the animation is running.  For more details, you can read this Wikipedia article.  ","version":"Next","tagName":"h3"},{"title":"Loop modes​","type":1,"pageTitle":"The Timeline","url":"/Pixelorama-Docs/user_manual/user_interface/timeline#loop-modes","content":" The button located directly on the left of the FPS is used to change the animation loop mode. There are three loop modes:  Cycle loop. When the animation reaches the final frame, it will start playing again from the first frame. This is the default option.Ping-pong. When the animation reaches the final frame, it begins playing backward, starting from that final frame. When it reaches the first frame, it will again start playing forward until it reaches the final frame, and so on.No loop. When the animation reaches the final frame, it simply stops playing.  ","version":"Next","tagName":"h3"},{"title":"Onion skinning​","type":1,"pageTitle":"The Timeline","url":"/Pixelorama-Docs/user_manual/user_interface/timeline#onion-skinning","content":" Directly on the left of the loop mode button, you will find two buttons used for onion skinning. Onion skinning is useful for animations because it's a simple and easy way to preview the previous and next frames at the same time as the frame you are currently editing. For more details, you can read this Wikipedia article.  The button on the right simply toggles onion skinning on and off, and the one on the left brings up options, like the amount of past (previous) and future (next) frames that appear, and blue-red mode, which tints the previous frames blue, and the next frames red.  ignore onion skinning If you want a layer to ignore onion skinning, you can right click on the layer button in the timeline, select &quot;Properties&quot; and enable the &quot;Ignore in onion skinning&quot; option.  ","version":"Next","tagName":"h3"},{"title":"Layers​","type":1,"pageTitle":"The Timeline","url":"/Pixelorama-Docs/user_manual/user_interface/timeline#layers","content":" On the left side of the timeline, you will see the layer buttons. Clicking on a layer button will select the current layer. Double-clicking will let you change the name of that layer. Right clicking a layer button will open up a menu, with options such as the layer's properties, and whether it's a clipping mask or not.  The layer buttons have three more buttons on them. The first toggles the layer's visibility. While invisible, the layer cannot be edited by the user. It will also remain invisible on export. The second locks and unlocks the layer. If the layer is locked, it cannot be edited by the user, but it does remain visible. The third button is used to automatically link the new cels that are being created. If it's toggled on, it is essentially a fast way to create linked cels.  There are 7 more buttons located on top of the layers. These, in order of appearance: add a new layer, remove the currently active layer, move the current layer up and down, clone the current layer, merge the current layer with the one directly below it, and open up a dialog for layer effects. Below these buttons, you can change the selected layer's blend mode and opacity.  ","version":"Next","tagName":"h2"},{"title":"Frames​","type":1,"pageTitle":"The Timeline","url":"/Pixelorama-Docs/user_manual/user_interface/timeline#frames","content":" Directly above the cels, you will notice some buttons with each one having a number. These are the frame buttons, and the number they have is their order in the animation.  Clicking on a frame button will select that frame, and right-clicking a frame button will open up a menu. The menu options include frame properties, remove frame, clone frame, move frame to the left, move frame to the right, new tag, reverse frames (only works when multiple frames are selected), and center frames. Clicking on frame properties brings up a window that lets you change the duration of that frame, as well as set custom user-defined data.  frame duration By default, the duration of each frame is set to 1x, which means it will take exactly as much time as the timeline FPS (frames per second). Setting it to 2x, for example, that frame will take twice as much time, while setting it to 0.5x will take half the time, meaning it will play out faster.  You can also drag and drop frame buttons to re-arrange them. This will also affect their corresponding cels.  On the top side of the timeline, you will find frame-related buttons which offer the same functionality as the frame button right-click menu, like adding, removing, cloning and moving frames.  ","version":"Next","tagName":"h2"},{"title":"Frame tags​","type":1,"pageTitle":"The Timeline","url":"/Pixelorama-Docs/user_manual/user_interface/timeline#frame-tags","content":" Frame tags are used to organize different parts of your animated sprite. Those parts can also be exported independently using frame tags.  To create a new tag, you can right click on a frame button and select &quot;New Tag&quot;. A popup will appear that lets you set a name for the tag, a color, the starting (from) and ending (to) frame, as well as custom user-defined data.  To edit an already existing tag, you can click on its name on the timeline, above the frame area. You can quickly move and resize it by dragging its edges.  If &quot;Animation plays only on frames of the same tag&quot; is toggled on in the timeline options, then, when you preview your animation, it will only preview the frames that belong on the same tag as the currently selected frame. This is a great way to preview parts of your animation separately.  ","version":"Next","tagName":"h3"},{"title":"Cels​","type":1,"pageTitle":"The Timeline","url":"/Pixelorama-Docs/user_manual/user_interface/timeline#cels","content":" Cels are the intersection of layers and frames. For a more detailed explanation, you can read this page. To select a cel in order to draw on it, you can left-click on their respective button. The cel buttons take the most space in the timeline, and they are located to the right of the layer buttons and below the frame buttons. They also have a small preview of their image data on them.  Right-clicking on a cel button will bring up a menu, with options such as properties, link (or unlink) cel, and delete, which clears the content of the cel, making it fully transparent. In the cel properties, you can change their opacity (cel opacity is different than layer opacity), their z-index and also set custom user-defined data.  Selecting multiple cels You can select/deselect multiple cels by holding the Control key and left-clicking individual cels, or hold the Shift key and left-click a cel to also select all of the cels between the one that was clicked and the one that has been selected last. This also works on frame and layer buttons. For example, selecting two frame buttons using Control or Shift will select all of their cels as well. The same is true for layer buttons.  Drag and drop You can drag and drop layer, frame and cel buttons to re-arrange them. Re-arranging frame and layer buttons also affects their cels. ","version":"Next","tagName":"h2"},{"title":"User Interface Basics","type":0,"sectionRef":"#","url":"/Pixelorama-Docs/user_manual/user_interface/user_interface_basics","content":"","keywords":"","version":"Next"},{"title":"Changing the look of the interface​","type":1,"pageTitle":"User Interface Basics","url":"/Pixelorama-Docs/user_manual/user_interface/user_interface_basics#changing-the-look-of-the-interface","content":" By default, the dark theme is enabled on Pixelorama. You can select another by going to the Edit menu on the top bar, selecting Preferences and clicking on the Interface tab on the left. There, you can also change other settings, such as the display scale of the entire interface and the font that the text of the interface uses, as well as its size.  ","version":"Next","tagName":"h2"},{"title":"UI customization​","type":1,"pageTitle":"User Interface Basics","url":"/Pixelorama-Docs/user_manual/user_interface/user_interface_basics#ui-customization","content":" The user interface of Pixelorama is very customizable, allowing you to re-arrange the panels however you want. To move a panel, you have to enable &quot;Moveable Panels&quot; from the Window menu (or press F9, which is its default shortcut). This will make each panel have their own tab. Click with your left mouse button (or touch, if you are using a touch screen) on the tab of the panel you wish to move, and drag it to the area you want to move it to. A highlight will appear while dragging, which lets you know of the space the panel will take once you finish dragging. Release your mouse button (or your finger) to move the panel to its new position.  ","version":"Next","tagName":"h2"},{"title":"Floating windows​","type":1,"pageTitle":"User Interface Basics","url":"/Pixelorama-Docs/user_manual/user_interface/user_interface_basics#floating-windows","content":" If the tabs of the panels are visible, on the right side of the tab area, there will be a small options button. Clicking on that, a menu appears with the option make the panel into a floating window. Closing that floating window will turn it back into a panel. By default, these windows will be embedded into Pixelorama's main window. If you want them to be able to go outside the main window and act as native windows of your operating system, you can go to the Edit menu, Preferences, and under the Interface category, toggle &quot;Single window mode&quot; off, and then restart Pixelorama.  ","version":"Next","tagName":"h2"},{"title":"UI layouts​","type":1,"pageTitle":"User Interface Basics","url":"/Pixelorama-Docs/user_manual/user_interface/user_interface_basics#ui-layouts","content":" You also have the ability to make custom layouts of the user interface. You can change the layout by going to the Window menu, and selecting a layout from the Layouts submenu. If you want to save the current state of the UI as a layout, you can go to the Window menu, and, under Layouts, select &quot;Add Layout&quot;, and a new layout will be saved. To delete a layout, select it and then click on the &quot;Delete&quot; option. To restore a default layout to its original state, select it and click on the &quot;Reset&quot; option. Note that this only works for default layouts, not user-made ones. ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}